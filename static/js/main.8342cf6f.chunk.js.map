{"version":3,"sources":["NewTitle.tsx","Task.tsx","Tasks.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Tasks","props","useState","newTitle","setNewTitle","error","setError","className","type","value","onChange","e","currentTarget","onClick","trim","addTask","id","checked","task","isDone","changeTaskStatus","title","removeTasks","filterAllBtnHandler","filter","filterActiveBtnHandler","filterCompletedBtnHandler","removeTodoLists","NewTitle","map","el","Task","changeFilter","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTask","changeFilterTasks","todoListId","newTasks","updatedTodoLists","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8342cf6f.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {AppTaskType, filterType} from \"./App\";\n\ntype NewTitleType = {\n    addTask:(newTitle:string, todoListId:string) => void;\n    id:string;\n}\n\nfunction Tasks(props:NewTitleType) {\n    const [newTitle, setNewTitle] = useState<string>('')\n    const [error, setError] = useState<string>('')\n    const changeTitle = () => {\n        if(newTitle.trim()){\n            props.addTask(newTitle.trim(),props.id)\n        }\n        else{\n            setError('new task required!')\n        }\n        setNewTitle('')\n    }\n    const inputChange = (e:ChangeEvent<HTMLInputElement>) =>{\n        setNewTitle(e.currentTarget.value)\n        setError('')\n    }\n    return (\n        <div className=\"App\">\n            <input className={error?'inputError':''} type=\"text\" value={newTitle}  onChange={inputChange}/>\n            <button onClick={changeTitle}>+</button>\n            {error? <div className={'error'}>{error}</div>:''}\n        </div>\n    );\n}\n\nexport default Tasks;\n","import React from 'react';\nimport './App.css';\nimport {AppTaskType, filterType} from \"./App\";\n\ntype TaskType = {\n    id:string\n    task:AppTaskType;\n    changeTaskStatus:(id:string, todoListId: string, isDone: boolean) => void;\n    removeTasks: (id: string, todoListId: string) => void;\n}\n\nfunction Tasks(props:TaskType) {\n\n    return (\n        <div className=\"App\">\n            <input type=\"checkbox\" checked={props.task.isDone}\n                   onChange={(e)=>{props.changeTaskStatus(props.task.id,props.id,e.currentTarget.checked)}}/>\n            {props.task.title}\n            <button onClick={()=>{props.removeTasks(props.task.id,props.id)}}>x</button>\n        </div>\n    );\n}\n\nexport default Tasks;\n","import React from 'react';\nimport './App.css';\nimport {AppTaskType, filterType} from \"./App\";\nimport NewTitle from './NewTitle';\nimport Task from './Task';\n\ntype TasksType = {\n    id: string;\n    title: string;\n    task: AppTaskType[];\n    changeFilter: (value: filterType, todoListId: string) => void;\n    removeTasks: (id: string, todoListId: string) => void;\n    addTask: (newTitle: string, todoListId: string) => void;\n    filter: filterType;\n    changeTaskStatus: (id: string, todoListId: string, isDone: boolean) => void;\n    removeTodoLists:(todoListId:string) => void;\n}\n\nfunction Tasks(props: TasksType) {\n\n    const filterAllBtnHandler = props.filter === 'all' ? 'activeBtn' : ''\n    const filterActiveBtnHandler = props.filter === 'active' ? 'activeBtn' : ''\n    const filterCompletedBtnHandler = props.filter === 'completed' ? 'activeBtn' : ''\n\n    return (\n        <div className=\"App\">\n            {props.title} <button onClick={()=>{props.removeTodoLists(props.id)}}>x</button>\n            <NewTitle addTask={props.addTask} id={props.id}/>\n            {props.task.map(el => <Task\n                key={el.id}\n                task={el}\n                changeTaskStatus={props.changeTaskStatus}\n                id={props.id}\n                removeTasks={props.removeTasks}/>\n            )}\n            <button className={filterAllBtnHandler} onClick={() => {\n                props.changeFilter('all', props.id)\n            }}>all\n            </button>\n            <button className={filterActiveBtnHandler} onClick={() => {\n                props.changeFilter('active', props.id)\n            }}>active\n            </button>\n            <button className={filterCompletedBtnHandler} onClick={() => {\n                props.changeFilter('completed', props.id)\n            }}>completed\n            </button>\n        </div>\n    );\n}\n\nexport default Tasks;\n","import React, {useState} from 'react';\nimport './App.css';\nimport {v1} from 'uuid';\nimport Tasks from './Tasks';\n\nexport type TodoListsType = {\n    id: string;\n    title: string;\n    filter: filterType\n}\nexport type AppTaskType = {\n    id: string;\n    title: string;\n    isDone: boolean;\n}\nexport type KeyTasksType = {\n    [key: string]: AppTaskType[]\n}\nexport type filterType = 'all' | 'active' | 'completed'\n\nfunction App() {\n\n    const todoListId_1 = v1();\n    const todoListId_2 = v1();\n\n    const [todoLists, setTodoLists] = useState<TodoListsType[]>([\n            {id: todoListId_1, title: 'What to Learn', filter: 'all'},\n            {id: todoListId_2, title: 'What to Study', filter: 'active'},\n        ]\n    )\n\n    const [task, setTask] = useState<KeyTasksType>({\n            [todoListId_1]: [\n                {id: v1(), title: 'Redux', isDone: false},\n                {id: v1(), title: 'Mobx', isDone: false},\n                {id: v1(), title: 'React', isDone: true},\n            ],\n            [todoListId_2]: [\n                {id: v1(), title: 'Html', isDone: true},\n                {id: v1(), title: 'Css', isDone: true},\n                {id: v1(), title: 'JS', isDone: false},\n            ]\n        }\n    )\n\n    function changeFilterTasks(todoLists: TodoListsType) {\n        switch (todoLists.filter) {\n            case 'active':\n                return task[todoLists.id].filter(el => !el.isDone)\n            case 'completed':\n                return task[todoLists.id].filter(el => el.isDone)\n            default:\n                return task[todoLists.id]\n        }\n    }\n\n    function changeFilter(value: filterType, todoListId: string) {\n        setTodoLists(todoLists.map(el => el.id === todoListId ? {...el, filter: value} : el))\n    }\n\n    function removeTasks(id: string, todoListId: string) {\n        const newTasks = task[todoListId].filter(el => el.id !== id)\n        setTask({...task, [todoListId]: newTasks})\n    }\n\n    function changeTaskStatus(id: string, todoListId: string, isDone: boolean) {\n        const newTasks = task[todoListId].map(el => el.id === id ? {...el, isDone: isDone} : el)\n        setTask({...task, [todoListId]: newTasks})\n    }\n\n    function addTask(newTitle: string, todoListId: string) {\n        const newTask = {\n            id: v1(),\n            title: newTitle,\n            isDone: false\n        }\n        const newTasks = [newTask, ...task[todoListId]]\n        setTask({...task, [todoListId]: newTasks})\n    }\n\n    function removeTodoLists(todoListId: string) {\n        const updatedTodoLists = todoLists.filter(el => el.id !== todoListId)\n        setTodoLists(updatedTodoLists)\n        delete task[todoListId]\n    }\n\n    return (\n        <div className=\"App\">\n            {todoLists.map(el => {\n                return <Tasks key={el.id}\n                              id={el.id}\n                              task={changeFilterTasks(el)}\n                              changeFilter={changeFilter}\n                              removeTasks={removeTasks}\n                              addTask={addTask}\n                              filter={el.filter}\n                              title={el.title}\n                              changeTaskStatus={changeTaskStatus}\n                              removeTodoLists={removeTodoLists}\n                />\n            })}\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}