{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.tsx","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","thunkAPI","a","res","resultCode","isLoggedIn","rejectWithValue","errors","fieldErrors","undefined","logOutTC","arg","slice","createSlice","name","initialState","reducers","setIsLoggedInAC","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","isInitialized","isInitializedAc","appReducer","removeTodolistAC","index","findIndex","el","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","fetchTasksTC","tasks","items","task","removeTaskTC","param","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","updateTaskAC","catch","console","warn","addTaskAC","todoListId","forEach","tasksReducer","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","isAuth","auth","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","ReactDOM","StrictMode","document","getElementById"],"mappings":"qKAiFYA,EAOAC,E,gCC1EGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,kHDPRQ,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAITE,GAEX,OADgBR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KALrFF,EAAe,SAQTI,GAEX,OADgBV,EAASW,OAAT,qBAA4CD,KATvDJ,EAAe,SAYTI,EAAYF,GAEvB,OADgBR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAblEF,EAAe,SAgBfO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAjBFP,EAAe,SAmBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KApBlER,EAAe,SAsBbO,EAAoBE,GAC3B,OAAOf,EAASS,KAAT,qBAA8DI,EAA9D,UAAkF,CAACL,MAAOO,KAvB5FT,EAAe,SAyBbO,EAAoBC,EAAgBE,GAC3C,OAAOhB,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUE,IAGnFC,EAAU,SACbC,GACF,OAAOlB,EAASS,KAAuC,aAAcS,IAFhED,EAAU,WAKf,OAAOjB,EAASO,IAAwC,YALnDU,EAAU,WAQf,OAAOjB,EAASW,OAAqB,gB,SAiCjCtB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,kCEpFC6B,EAAuB,SAAID,EAAuBE,GACvDF,EAAKG,SAASC,OACdF,EAASG,EAAc,CAACC,MAAMN,EAAKG,SAAS,MAE5CD,EAASG,EAAc,CAACC,MAAM,yBAElCJ,EAASK,EAAe,CAACC,OAAO,aAGvBC,EAA2B,SAACH,EAA4BJ,GACjEA,EAASG,EAAc,CAACC,MAAMA,EAAMI,QAAUJ,EAAMI,QAAU,yBAC9DR,EAASK,EAAe,CAACC,OAAO,a,QCTvBG,EACTC,YACC,aADe,uCACD,WAAOZ,EAAMa,GAAb,eAAAC,EAAA,6DACXD,EAASX,SAASK,EAAe,CAACC,OAAQ,aAD/B,kBAGWT,EAAcC,GAHzB,UAIqB,KADtBe,EAHC,QAICf,KAAKgB,WAJN,wBAKHH,EAASX,SAASK,EAAe,CAACC,OAAQ,aALvC,kBAMI,CAACS,YAAY,IANjB,eAQHhB,EAAqBc,EAAIf,KAAMa,EAASX,UARrC,kBASIW,EAASK,gBAAgB,CAACC,OAAQJ,EAAIf,KAAKG,SAAUiB,YAAaL,EAAIf,KAAKoB,eAT/E,sEAaPnB,EAAqB,EAAD,GAAQY,EAASX,UAb9B,kBAcAW,EAASK,gBAAgB,CAACC,OAAQ,CAAC,KAAMhB,UAAWiB,iBAAaC,KAdjE,0DADC,yDAkBPC,EAAWV,YAAiB,cAAD,uCAAgB,WAAOW,EAAKV,GAAZ,eAAAC,EAAA,+EAE9Bf,IAF8B,UAGpB,KADtBgB,EAF0C,QAGxCf,KAAKgB,WAHmC,yCAIrC,CAACC,YAAY,IAJwB,OAM5ChB,EAAqBc,EAAIf,KAAMa,EAASX,UANI,yDAShDD,EAAqB,KAAMD,KAAMa,EAASX,UATM,0DAAhB,yDAY3BsB,EAAQC,YAAY,CAC7BC,KAAM,OACNC,aAAc,CACVV,YAAY,GAEhBW,SAAU,CACNC,gBADM,SACUC,EAAOC,GACnBD,EAAMb,WAAac,EAAOC,QAAQf,aAG1CgB,cAAe,SAAAC,GACXA,EAAQC,QAAQxB,EAAQyB,WAAW,SAACN,EAAOC,GACvCD,EAAMb,WAAac,EAAOC,QAAQf,iBAKjCoB,EAAcb,EAAMc,QACnBT,EAAmBL,EAAMe,QAAzBV,gBC5CDL,EAAQC,YAAY,CAC7BC,KAAK,MACLC,aARmC,CACnCnB,OAAQ,OACRF,MAAO,KACPkC,eAAe,GAMfZ,SAAS,CACLa,gBAAgB,SAACX,EAAOC,GACpBD,EAAMU,cAAgBT,EAAOC,QAAQQ,eAEzCnC,cAAc,SAACyB,EAAOC,GAClBD,EAAMxB,MAAQyB,EAAOC,QAAQ1B,OAEjCC,eAAe,SAACuB,EAAOC,GACnBD,EAAMtB,OAASuB,EAAOC,QAAQxB,WAc7BkC,EAAalB,EAAMc,QACzB,EAAyDd,EAAMe,QAAxDE,EAAP,EAAOA,gBAAiBlC,EAAxB,EAAwBA,eAAgBF,EAAxC,EAAwCA,cC/BlCmB,EAAQC,YAAY,CAC7BC,KAAK,YACLC,aAH4C,GAI5CC,SAAU,CACNe,iBADM,SACWb,EAAMC,GACnB,IAAMa,EAAQd,EAAMe,WAAU,SAAAC,GAAE,OAAGA,EAAGtD,KAAOuC,EAAOC,QAAQxC,MACzDoD,GAAS,GACRd,EAAMiB,OAAOH,EAAM,IAG3BI,cAPM,SAOQlB,EAAMC,GAChBD,EAAMmB,QAAN,2BAAkBlB,EAAOC,QAAQkB,UAAjC,IAA2CC,OAAO,MAAOC,aAAa,WAE1EC,sBAVM,SAUgBvB,EAAMC,GACxB,IAAMa,EAAQd,EAAMe,WAAU,SAAAC,GAAE,OAAGA,EAAGtD,KAAKuC,EAAOC,QAAQxC,MAC1DsC,EAAMc,GAAOtD,MAAQyC,EAAOC,QAAQ1C,OAExCgE,uBAdM,SAciBxB,EAAMC,GACzB,IAAMa,EAAQd,EAAMe,WAAU,SAAAC,GAAE,OAAGA,EAAGtD,KAAKuC,EAAOC,QAAQxC,MAC1DsC,EAAMc,GAAOO,OAASpB,EAAOC,QAAQmB,QACzCI,6BAjBM,SAiBuBzB,EAAMC,GAC/B,IAAMa,EAAQd,EAAMe,WAAU,SAAAC,GAAE,OAAGA,EAAGtD,KAAKuC,EAAOC,QAAQxC,MAC1DsC,EAAMc,GAAOQ,aAAerB,EAAOC,QAAQxB,QAC/CgD,eApBM,SAoBS1B,EAAMC,GACjB,OAAOA,EAAOC,QAAQyB,UAAUC,KAAI,SAAAZ,GAAE,kCAAQA,GAAR,IAAYK,OAAO,MAAOC,aAAa,gBAMlF,EAE4C5B,EAAMe,QAF3CI,EAAP,EAAOA,iBAAkBK,GAAzB,EAAyBA,cAC5BK,GADG,EACHA,sBAAsBC,GADnB,EACmBA,uBACtBC,GAFG,EAEHA,6BAA6BC,GAF1B,EAE0BA,eACpBG,GAAmBnC,EAAMc,QC7BzBsB,GAAehD,YAAiB,mBAAD,uCAAqB,WAAOjB,EAAoBkB,GAA3B,iBAAAC,EAAA,6DAC7DD,EAASX,SAASK,EAAe,CAACC,OAAQ,aADmB,kBAGvCpB,EAAsBO,GAHiB,cAGnDoB,EAHmD,OAInD8C,EAAQ9C,EAAIf,KAAK8D,MACvBjD,EAASX,SAASK,EAAe,CAACC,OAAQ,eALe,kBAMlD,CAACuD,KAAMF,EAAOlE,WAAYA,IANwB,2DAQlDkB,EAASK,gBAAT,OARkD,0DAArB,yDAY/B8C,GACTpD,YAAiB,mBAAD,uCAAqB,WAAOqD,EAA+CpD,GAAtD,SAAAC,EAAA,sEACf1B,EAAwB6E,EAAMtE,WAAYsE,EAAMrE,QADjC,uCAE1B,CAACA,OAAQqE,EAAMrE,OAAQD,WAAYsE,EAAMtE,aAFf,2CAArB,yDAqBPuE,GAAe,SAACtE,EAAgBE,EAAkCH,GAAnD,OACxB,SAACO,EAAoBiE,GACjB,IACMJ,EADQI,IACKN,MAAMlE,GAAYyE,MAAK,SAACC,GAAD,OAAYA,EAAE7E,KAAOI,KAC/D,GAAKmE,EAAL,CAMA,IAAMO,EAA6B,aAC/BC,SAAUR,EAAKQ,SACfC,YAAaT,EAAKS,YAClBC,SAAUV,EAAKU,SACfC,UAAWX,EAAKW,UAChBpF,MAAOyE,EAAKzE,MACZkB,OAAQuD,EAAKvD,QACVV,GAGPV,EAAwBO,EAAYC,EAAQ0E,GACvC9F,MAAK,SAAAuC,GACF,GAA4B,IAAxBA,EAAIf,KAAKgB,WAAkB,CAC3B,IAAMe,EAAS4C,GAAa,CAAC/E,SAAQE,QAAOH,eAC5CO,EAAS6B,QAET9B,EAAqBc,EAAIf,KAAME,MAGtC0E,OAAM,SAACtE,GACJG,EAAyBH,EAAOJ,WAxBpC2E,QAAQC,KAAK,iCA2BZtD,GAAQC,YAAY,CAC7BC,KAAM,QACNC,aAvEiC,GAwEjCC,SAAU,CACNmD,UADM,SACIjD,EAAOC,GACbD,EAAMC,EAAOC,QAAQ+B,KAAKiB,YAAY/B,QAAQlB,EAAOC,QAAQ+B,OAEjEY,aAJM,SAIO7C,EAAOC,GAChB,IAAM8B,EAAQ/B,EAAMC,EAAOC,QAAQrC,YAC7BiD,EAAQiB,EAAMhB,WAAU,SAAAC,GAAE,OAAIA,EAAGtD,KAAOuC,EAAOC,QAAQpC,UACzDgD,GAAS,IACTiB,EAAMjB,GAAN,2BAAmBiB,EAAMjB,IAAWb,EAAOC,QAAQlC,UAI/DmC,cAAe,SAACC,GACZA,EAAQC,QAAQa,IAAe,SAAClB,EAAOC,GACnCD,EAAMC,EAAOC,QAAQkB,SAAS1D,IAAM,MAExC0C,EAAQC,QAAQQ,GAAkB,SAACb,EAAOC,UAC/BD,EAAMC,EAAOC,QAAQxC,OAEhC0C,EAAQC,QAAQqB,IAAgB,SAAC1B,EAAOC,GACpCA,EAAOC,QAAQyB,UAAUwB,SAAQ,SAAAnC,GAC7BhB,EAAMgB,EAAGtD,IAAM,SAGvB0C,EAAQC,QAAQyB,GAAaxB,WAAW,SAACN,EAAOC,GAC5CD,EAAMC,EAAOC,QAAQrC,YAAcoC,EAAOC,QAAQ+B,QAEtD7B,EAAQC,QAAQ6B,GAAa5B,WAAW,SAACN,EAAOC,GAC5C,IAAM8B,EAAQ/B,EAAMC,EAAOC,QAAQrC,YAC7BiD,EAAQiB,EAAMhB,WAAU,SAAAC,GAAE,OAAIA,EAAGtD,KAAOuC,EAAOC,QAAQpC,UACzDgD,GAAS,GACTiB,EAAMd,OAAOH,EAAO,SAMvBsC,GAAe1D,GAAMc,QAC3B,GAAkCd,GAAMe,QAAjCwC,GAAP,GAAOA,UAAWJ,GAAlB,GAAkBA,a,yDC7GZQ,GAAcC,IAAMC,MAAK,SAAS,GAAoD,IAAnDC,EAAkD,EAAlDA,QAAkD,IAAzCC,gBAAyC,SAC9FV,QAAQW,IAAI,sBAEZ,MAAwBC,mBAAS,IAAjC,oBAAKnG,EAAL,KAAYoG,EAAZ,KACA,EAAwBD,mBAAwB,MAAhD,oBAAKnF,EAAL,KAAYqF,EAAZ,KAEMC,EAAiB,WACE,KAAjBtG,EAAMuG,QACNP,EAAQhG,GACRoG,EAAS,KAETC,EAAS,sBAiBjB,OAAO,iCACH,eAACG,GAAA,EAAD,CAAWC,QAAQ,WACRR,SAAUA,EACVjF,QAASA,EACT0F,MAAO1G,EACP2G,SAlBS,SAACC,GACrBR,EAASQ,EAAEC,cAAcH,QAkBdI,WAfW,SAACF,GACT,OAAV5F,GACAqF,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAWOU,MAAM,QACNC,WAAYjG,IAEvB,eAACkG,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAAgBL,SAAUA,EAA/D,SACI,eAACoB,GAAA,EAAD,Y,SCxCCC,GAAexB,IAAMC,MAAK,SAAUwB,GAC7ChC,QAAQW,IAAI,uBACZ,MAA8BC,oBAAS,GAAvC,oBAAKqB,EAAL,KAAeC,EAAf,KACA,EAAwBtB,mBAASoB,EAAMb,OAAvC,oBAAK1G,EAAL,KAAYoG,EAAZ,KAcA,OAAOoB,EACE,eAAChB,GAAA,EAAD,CAAWE,MAAO1G,EAAO2G,SALd,SAACC,GACjBR,EAASQ,EAAEC,cAAcH,QAI4BgB,WAAS,EAACC,OAT1C,WACrBF,GAAY,GACZF,EAAMZ,SAAS3G,MAQb,uBAAM4H,cAda,WACrBH,GAAY,GACZrB,EAASmB,EAAMb,QAYb,SAAwCa,EAAMb,W,oBCd3CmB,GAAO/B,IAAMC,MAAK,SAACwB,GAC5B,IAAMO,EAAiBC,uBAAY,kBAAMR,EAAMS,WAAWT,EAAM9C,KAAKvE,GAAIqH,EAAMlH,cAAa,IAEtF4H,EAAkBF,uBAAY,SAACnB,GACjC,IAAIsB,EAAiBtB,EAAEC,cAAcsB,QACrCZ,EAAMa,iBAAiBb,EAAM9C,KAAKvE,GAAIgI,EAAiBrJ,EAAawJ,UAAYxJ,EAAayJ,IAAKf,EAAMlH,cACzG,CAACkH,EAAM9C,KAAKvE,GAAIqH,EAAMlH,aAEnBkI,EAAuBR,uBAAY,SAACS,GACtCjB,EAAMkB,gBAAgBlB,EAAM9C,KAAKvE,GAAIsI,EAAUjB,EAAMlH,cACtD,CAACkH,EAAM9C,KAAKvE,GAAIqH,EAAMlH,aAEzB,OAAO,uBAAyBqI,UAAWnB,EAAM9C,KAAKvD,SAAWrC,EAAawJ,UAAY,UAAY,GAA/F,UACH,eAACM,GAAA,EAAD,CACIR,QAASZ,EAAM9C,KAAKvD,SAAWrC,EAAawJ,UAC5ClB,MAAM,UACNR,SAAUsB,IAGd,eAACX,GAAD,CAAcZ,MAAOa,EAAM9C,KAAKzE,MAAO2G,SAAU4B,IACjD,eAACrB,EAAA,EAAD,CAAYE,QAASU,EAArB,SACI,eAACc,GAAA,EAAD,QATSrB,EAAM9C,KAAKvE,OCDnB2I,GAAW/C,IAAMC,MAAK,YAAgD,IAAD,IAApC+C,YAAoC,SAAnBvB,EAAmB,yBAC9EhC,QAAQW,IAAI,mBAEZ,IAAMtF,EAAWmI,cACjBC,qBAAU,WACN,IAAIF,EAAJ,CAGA,IAAMG,EAAQ3E,GAAaiD,EAAM3D,SAAS1D,IAC1CU,EAASqI,MACV,IAEH,IAAMC,EAAUnB,uBAAY,SAAC/H,GACzBuH,EAAM2B,QAAQlJ,EAAOuH,EAAM3D,SAAS1D,MACrC,CAACqH,EAAM2B,QAAS3B,EAAM3D,SAAS1D,KAK5BiJ,EAAsBpB,uBAAY,SAAC/H,GACrCuH,EAAM4B,oBAAoB5B,EAAM3D,SAAS1D,GAAIF,KAC9C,CAACuH,EAAM3D,SAAS1D,GAAIqH,EAAM4B,sBAEvBC,EAAoBrB,uBAAY,kBAAMR,EAAM8B,aAAa,MAAO9B,EAAM3D,SAAS1D,MAAK,CAACqH,EAAM3D,SAAS1D,GAAIqH,EAAM8B,eAC9GC,EAAuBvB,uBAAY,kBAAMR,EAAM8B,aAAa,SAAU9B,EAAM3D,SAAS1D,MAAK,CAACqH,EAAM3D,SAAS1D,GAAIqH,EAAM8B,eACpHE,EAA0BxB,uBAAY,kBAAMR,EAAM8B,aAAa,YAAa9B,EAAM3D,SAAS1D,MAAK,CAACqH,EAAM3D,SAAS1D,GAAIqH,EAAM8B,eAG5HG,EAAmBjC,EAAMhD,MAS7B,MAP8B,WAA1BgD,EAAM3D,SAASC,SACf2F,EAAmBjC,EAAMhD,MAAMV,QAAO,SAAAkB,GAAC,OAAIA,EAAE7D,SAAWrC,EAAayJ,QAE3C,cAA1Bf,EAAM3D,SAASC,SACf2F,EAAmBjC,EAAMhD,MAAMV,QAAO,SAAAkB,GAAC,OAAIA,EAAE7D,SAAWrC,EAAawJ,cAGlE,iCACH,gCAAI,eAACf,GAAD,CAAcZ,MAAOa,EAAM3D,SAAS5D,MAAO2G,SAAUwC,IACrD,eAACjC,EAAA,EAAD,CAAYE,QAvBG,WACnBG,EAAMkC,eAAelC,EAAM3D,SAAS1D,KAsBK+F,SAA0C,YAAhCsB,EAAM3D,SAASE,aAA9D,SACI,eAAC8E,GAAA,EAAD,SAGR,eAAC/C,GAAD,CAAaG,QAASkD,EAASjD,SAA0C,YAAhCsB,EAAM3D,SAASE,eACxD,+BAEQ0F,EAAiBpF,KAAI,SAAAW,GAAC,OAAI,eAAC8C,GAAD,CAAiBpD,KAAMM,EAAG1E,WAAYkH,EAAM3D,SAAS1D,GAC/C8H,WAAYT,EAAMS,WAClBS,gBAAiBlB,EAAMkB,gBACvBL,iBAAkBb,EAAMa,kBAHnBrD,EAAE7E,SAO/C,uBAAKwJ,MAAO,CAACC,WAAY,QAAzB,UACI,eAACC,EAAA,EAAD,CAAQnD,QAAmC,QAA1Bc,EAAM3D,SAASC,OAAmB,WAAa,OACxDuD,QAASgC,EACTjC,MAAO,UAFf,iBAKA,eAACyC,EAAA,EAAD,CAAQnD,QAAmC,WAA1Bc,EAAM3D,SAASC,OAAsB,WAAa,OAC3DuD,QAASkC,EACTnC,MAAO,UAFf,oBAIA,eAACyC,EAAA,EAAD,CAAQnD,QAAmC,cAA1Bc,EAAM3D,SAASC,OAAyB,WAAa,OAC9DuD,QAASmC,EACTpC,MAAO,YAFf,gC,SChEC0C,GAAqC,SAAC,GAAoB,IAAD,IAAlBf,YAAkB,SAC5D3E,EAAY2F,aAAyD,SAAAtH,GAAK,OAAIA,EAAM2B,aACpFI,EAAQuF,aAA8C,SAAAtH,GAAK,OAAIA,EAAM+B,SACrEwF,EAASD,aAAsC,SAACtH,GAAD,OAAWA,EAAMwH,KAAKrI,cAErEf,EAAWmI,cACjBC,qBAAU,WACN,GAAKe,EAAL,CAGA,IAAMd,ENSH,SAACrI,GACJA,EAASK,EAAe,CAACC,OAAO,aAChCpB,IACKZ,MAAK,SAACuC,GACHb,EAASsD,GAAe,CAACC,UAAU1C,EAAIf,QACvCE,EAASK,EAAe,CAACC,OAAO,mBMbxCN,EAASqI,MACV,IAEH,IAAMjB,EAAaD,uBAAY,SAAUzH,EAAgBD,GACrD,IAAM4I,EAAQvE,GAAa,CAACpE,SAAQD,eACpCO,EAASqI,KACV,IAEGC,EAAUnB,uBAAY,SAAU/H,EAAeK,GACjD,IAAM4I,ELhBW,SAACjJ,EAAeK,GAAhB,OAAuC,SAACO,GAC7DA,EAASK,EAAe,CAACC,OAAQ,aACjCpB,EAAwBO,EAAYL,GAC/Bd,MAAK,SAAAuC,GACF,GAA4B,IAAxBA,EAAIf,KAAKgB,WAAkB,CAC3B,IAAM+C,EAAOhD,EAAIf,KAAKA,KAAKuJ,KACrBxH,EAASgD,GAAU,CAAChB,SAC1B7D,EAAS6B,GACT7B,EAASK,EAAe,CAACC,OAAQ,oBAEjCP,EAAqBc,EAAIf,KAAME,MAGtC0E,OAAM,SAACtE,GACJG,EAAyBH,EAAOJ,OKEtBsJ,CAAUlK,EAAOK,GAC/BO,EAASqI,KACV,IAEGkB,EAAepC,uBAAY,SAAU7H,EAAYgB,EAAsBb,GACzE,IAAM4I,EAAQrE,GAAa1E,EAAI,CAACgB,UAASb,GACzCO,EAASqI,KACV,IAEGR,EAAkBV,uBAAY,SAAU7H,EAAYkK,EAAkB/J,GACxE,IAAM4I,EAAQrE,GAAa1E,EAAI,CAACF,MAAOoK,GAAW/J,GAClDO,EAASqI,KACV,IAEGI,EAAetB,uBAAY,SAAUrB,EAAyBrG,GAChE,IAAMoC,EAASuB,GAAuB,CAAC9D,GAAGG,EAAYwD,OAAO6C,IAC7D9F,EAAS6B,KACV,IAEGgH,EAAiB1B,uBAAY,SAAU7H,GACzC,INZyBG,EMYnB4I,GNZmB5I,EMYMH,ENX5B,SAACU,GAEJA,EAASK,EAAe,CAACC,OAAO,aAEhCN,EAASqD,GAA6B,CAAC/D,GAAGG,EAAYa,OAAO,aAC7DpB,EAA4BO,GACvBnB,MAAK,SAACuC,GACHb,EAASyC,EAAiB,CAACnD,GAAGG,KAE9BO,EAASK,EAAe,CAACC,OAAO,oBMGxCN,EAASqI,KACV,IAEGE,EAAsBpB,uBAAY,SAAU7H,EAAYF,GAC1D,IAAMiJ,ENOuB,SAAC/I,EAAYF,GAC9C,OAAO,SAACY,GACJd,EAA4BI,EAAIF,GAC3Bd,MAAK,SAACuC,GACHb,EAASmD,GAAsB,CAAC7D,GAAGA,EAAGF,MAAMA,SMXtCqK,CAAsBnK,EAAIF,GACxCY,EAASqI,KACV,IAEGqB,EAAcvC,uBAAY,SAAC/H,GAC7B,IAAMiJ,ENRe,SAACjJ,GAC1B,OAAO,SAACY,GACJA,EAASK,EAAe,CAACC,OAAO,aAChCpB,EAA4BE,GACvBd,MAAK,SAACuC,GACHb,EAAS8C,GAAc,CAACE,SAASnC,EAAIf,KAAKA,KAAKuJ,QAC/CrJ,EAASK,EAAe,CAACC,OAAO,mBME1BqJ,CAAcvK,GAC5BY,EAASqI,KACV,CAACrI,IACJ,OAAImJ,EAIG,uCACH,eAACS,GAAA,EAAD,CAAMC,WAAS,EAACf,MAAO,CAACgB,QAAS,QAAjC,SACI,eAAC7E,GAAD,CAAaG,QAASsE,MAE1B,eAACE,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQxG,EAAUC,KAAI,SAAAwG,GACV,IAAIC,EAAmBtG,EAAMqG,EAAG1K,IAEhC,OAAO,eAACsK,GAAA,EAAD,CAAMP,MAAI,EAAV,SACH,eAACa,GAAA,EAAD,CAAOpB,MAAO,CAACgB,QAAS,QAAxB,SACI,eAAC7B,GAAD,CACIjF,SAAUgH,EACVrG,MAAOsG,EACP7C,WAAYA,EACZqB,aAAcA,EACdH,QAASA,EACTd,iBAAkB+B,EAClBV,eAAgBA,EAChBhB,gBAAiBA,EACjBU,oBAAqBA,EACrBL,KAAMA,OAZK8B,EAAG1K,YAZ/B,eAAC,KAAD,CAAU6K,GAAI,Y,oBCtE7B,SAASC,GAAMzD,GACX,OAAO,eAAC,KAAD,aAAU0D,UAAW,EAAGxE,QAAQ,UAAac,IAGjD,SAAS2D,KAEZ,IAAMlK,EAAQ8I,aAA6C,SAAAtH,GAAK,OAAIA,EAAM2I,IAAInK,SACxEJ,EAAWmI,cAEXqC,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJ1K,EAASG,EAAc,CAACC,MAAM,SAI5BuK,EAAmB,OAAVvK,EAEf,OACI,eAACwK,GAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,EAAzD,SACI,eAAC,GAAD,CAAOO,QAASP,EAAaQ,SAAS,QAAtC,SACK5K,M,uEClBX6K,GAAcC,aAAgB,CAChCvH,MAAOqB,GACPzB,UAAWE,GACX8G,IAAK/H,EACL4G,KAAMjH,IAEGgJ,GAAQC,YAAe,CAChChJ,QAAQ6I,GACRI,WAAW,SAAAC,GAAoB,OAAIA,IAAuBC,QAAQC,SAOtEC,OAAON,MAAQA,GAGR,ICTMO,GAAQ,WACjB,IAAM1L,EDQ0BmI,cCP1BpH,EAAamI,aAAsC,SAACtH,GAAD,OAAWA,EAAMwH,KAAKrI,cACzE4K,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMjL,EAA0B,GAWhC,OAVKiL,EAAOJ,MAEA,4CAA4CK,KAAKD,EAAOJ,SAChE7K,EAAO6K,MAAQ,yBAFf7K,EAAO6K,MAAQ,WAIfI,EAAOH,SAEFG,EAAOH,SAAS7L,OAAS,IAC9Be,EAAO8K,SAAW,oBAFlB9K,EAAO8K,SAAW,WAIf9K,GAEXmL,SAAS,WAAD,4BAAC,WAAOF,EAAsBG,GAA7B,uBAAAzL,EAAA,sEACgBZ,EAASS,EAAQyL,IADjC,OACCrK,EADD,OAEFpB,EAAQ6L,SAASC,MAAM1K,KACtB,UAAGA,EAAOC,eAAV,iBAAG,EAAgBZ,mBAAnB,aAAG,EAA6BhB,UACtBE,EAD6B,UACrByB,EAAOC,eADc,aACrB,EAAgBZ,YAAY,GAC1CmL,EAAcG,cAAcpM,EAAMqM,MAAMrM,EAAMA,QALjD,2CAAD,qDAAC,KAYb,OAAGW,EACQ,eAAC,KAAD,CAAUoJ,GAAI,MAElB,eAACP,GAAA,EAAD,CAAMC,WAAS,EAAC6C,QAAQ,SAAxB,SACH,eAAC9C,GAAA,EAAD,CAAMP,MAAI,EAACsD,GAAI,EAAf,SACI,uBAAMP,SAAUT,EAAOiB,aAAvB,SACA,gBAACC,GAAA,EAAD,WACI,gBAACC,GAAA,EAAD,WACI,0DACI,oBAAGC,KAAM,wCACNC,OAAQ,SADX,qBAIJ,yEACA,2DACA,mDAEJ,gBAACC,GAAA,EAAD,WACI,eAACrH,GAAA,EAAD,aACIQ,MAAM,QACN8G,OAAO,UACHvB,EAAOwB,cAAc,WAE5BxB,EAAOyB,QAAQtB,OAAQH,EAAO1K,OAAO6K,OAAS,sBAAKhD,MAAO,CAACvC,MAAO,OAApB,SAA6BoF,EAAO1K,OAAO6K,QAC1F,eAAClG,GAAA,EAAD,aACIyH,KAAK,WACLjH,MAAM,WACN8G,OAAO,UACHvB,EAAOwB,cAAc,cAE5BxB,EAAOyB,QAAQrB,UAAWJ,EAAO1K,OAAO8K,UAAY,sBAAKjD,MAAO,CAACvC,MAAO,OAApB,SAA6BoF,EAAO1K,OAAO8K,WAChG,eAACuB,GAAA,EAAD,CACIlH,MAAO,cACPmH,QAAS,eAACxF,GAAA,EAAD,eACD4D,EAAOwB,cAAc,kBAGjC,eAACnE,EAAA,EAAD,CAAQqE,KAAM,SAAUxH,QAAS,YAAaU,MAAO,UAArD,gCCfLiH,OAnDf,YAAyC,IAAD,IAA1BtF,YAA0B,SAC9BlI,EAAWmI,cACX7F,EAAgB4G,aAAuC,SAACtH,GAAD,OAAUA,EAAM2I,IAAIjI,iBAC3EhC,EAAS4I,aAAiD,SAACtH,GAAD,OAAWA,EAAM2I,IAAIjK,UAC/ES,EAAamI,aAAuC,SAACtH,GAAD,OAAUA,EAAMwH,KAAKrI,cAU/E,OARAqH,qBAAU,WACNpI,GXK6B,SAACA,GAElCH,IAAiBvB,MAAK,SAACuC,GACS,IAAxBA,EAAIf,KAAKgB,YACTd,EAAS2B,EAAgB,CAACZ,YAAW,QAGxC2D,OAAM,eAGN+I,SAAQ,WACLzN,EAASuC,EAAgB,CAACD,eAAc,aWf9C,IAMGA,EAUD,uBAAKwF,UAAU,MAAf,UACI,eAACwC,GAAD,IACA,gBAACoD,EAAA,EAAD,CAAQC,SAAS,SAAjB,UACI,gBAACC,EAAA,EAAD,WACI,eAACtH,EAAA,EAAD,CAAYuH,KAAK,QAAQtH,MAAM,UAAUuH,aAAW,OAApD,SACK,eAACC,EAAA,EAAD,MAEL,eAACC,EAAA,EAAD,CAAYnI,QAAQ,KAApB,kBAGC9E,GAAc,eAACiI,EAAA,EAAD,CAAQxC,QAxBjB,WAClBxG,EAASoB,MAuBkB,qBACf,eAAC4H,EAAA,EAAD,CAAQzC,MAAM,UAAd,sBAEQ,YAAXjG,GAAwB,eAAC2N,EAAA,EAAD,OAE7B,eAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,eAAC,GAAD,CAAepG,KAAMA,OAC3D,eAAC,KAAD,CAAOmG,KAAM,SAAUC,OAAQ,kBAAM,eAAC,GAAD,OACrC,eAAC,KAAD,CAAOD,KAAM,OAAQC,OAAQ,kBAAM,wDACnC,eAAC,KAAD,CAAUC,KAAO,IAAKpE,GAAI,iBA7B/B,sBACHrB,MAAO,CAAC6E,SAAU,QAASa,IAAK,MAAOC,UAAW,SAAUC,MAAO,QADhE,SAEH,eAACC,EAAA,EAAD,O,SClCZC,IAASN,OACL,eAAC,IAAMO,WAAP,UACI,eAAC,KAAD,UACI,eAAC,IAAD,CAAU1D,MAAOA,GAAjB,SACI,eAAC,GAAD,UAKZ2D,SAASC,eAAe,SAM5B5Q,M","file":"static/js/main.b1b069b8.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1eaa5d66-d310-487c-a1d0-2fd59af6c2de'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data)\r\n    },\r\n    authMe() {\r\n        return instance.get<ResponseType<{ data: AuthMeType }>>('auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n\r\n}\r\n\r\n// types\r\ntype AuthMeType = {\r\n    id:number;\r\n    email:string;\r\n    login:string;\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe?: boolean;\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = {field:string; error:string;}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    fieldErrors?:Array<FieldErrorType>\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error:error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, FieldErrorType, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from 'axios';\r\n\r\nexport const loginTC =\r\n    createAsyncThunk<{ isLoggedIn: boolean }, LoginParamsType, { rejectValue: { errors: Array<string>, fieldErrors?: Array<FieldErrorType> } }>\r\n    ('auth/login', async (data, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await authAPI.login(data)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n                return {isLoggedIn: true};\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldErrors: res.data.fieldErrors})\r\n            }\r\n        } catch (error) {\r\n            const err: AxiosError = error\r\n            handleServerAppError(error, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: [error.messages], fieldErrors: undefined})\r\n        }\r\n    })\r\nexport const logOutTC = createAsyncThunk('auth/logout', async (arg, thunkAPI) => {\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            return {isLoggedIn: false}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerAppError(error.data, thunkAPI.dispatch)\r\n    }\r\n})\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name:'app',\r\n    initialState:initialState,\r\n    reducers:{\r\n        isInitializedAc:(state, action:PayloadAction<{isInitialized:boolean}>)=>{\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n        setAppErrorAC:(state, action:PayloadAction<{error:string|null}>)=>{\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC:(state, action:PayloadAction<{status:RequestStatusType}>)=>{\r\n            state.status = action.payload.status\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\nexport const appReducer = slice.reducer\r\nexport const {isInitializedAc, setAppStatusAC, setAppErrorAC} = slice.actions\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n\r\n    authAPI.authMe().then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({isLoggedIn:true}))\r\n        }\r\n    })\r\n        .catch(()=>{\r\n\r\n        })\r\n        .finally(()=>{\r\n            dispatch(isInitializedAc({isInitialized:true}))\r\n        })\r\n}","import { todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\nexport const slice = createSlice({\r\n    name:'todolists',\r\n    initialState:initialState,\r\n    reducers: {\r\n        removeTodolistAC(state,action:PayloadAction<{id:string}>){\r\n            const index = state.findIndex(el=> el.id !== action.payload.id);\r\n            if(index > -1){\r\n                state.splice(index,1)\r\n            }\r\n        },\r\n        addTodolistAC(state,action:PayloadAction<{todolist:TodolistType}>){\r\n            state.unshift({...action.payload.todolist, filter:'all', entityStatus:'idle'})\r\n        },\r\n        changeTodolistTitleAC(state,action:PayloadAction<{id: string, title: string}>){\r\n            const index = state.findIndex(el=> el.id===action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state,action:PayloadAction<{id: string, filter: FilterValuesType}>){\r\n            const index = state.findIndex(el=> el.id===action.payload.id)\r\n            state[index].filter = action.payload.filter },\r\n        changeTodolistEntityStatusAC(state,action:PayloadAction<{id: string, status: RequestStatusType}>){\r\n            const index = state.findIndex(el=> el.id===action.payload.id)\r\n            state[index].entityStatus = action.payload.status },\r\n        setTodolistsAC(state,action:PayloadAction<{todolists: Array<TodolistType>}>){\r\n            return action.payload.todolists.map(el=> ({...el, filter:'all', entityStatus:'idle'}))\r\n        }\r\n\r\n    }\r\n})\r\n\r\nexport const {removeTodolistAC, addTodolistAC,\r\n    changeTodolistTitleAC,changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,setTodolistsAC} = slice.actions\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch:Dispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists:res.data}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id:todolistId, status:'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id:todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist:res.data.data.item}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id:id,title:title}))\r\n            })\r\n    }\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {addTodolistAC, removeTodolistAC, setTodolistsAC,} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId);\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {task: tasks, todolistId: todolistId}\r\n    } catch (err) {\r\n        return thunkAPI.rejectWithValue(err)\r\n    }\r\n\r\n})\r\nexport const removeTaskTC =\r\n    createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    })\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find((t: any) => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(el => el.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(el => {\r\n                state[el.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.task\r\n        });\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(el => el.id !== action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n    }\r\n\r\n})\r\nexport const tasksReducer = slice.reducer\r\nexport const {addTaskAC, updateTaskAC} = slice.actions\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), []);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isAuth = useSelector<AppRootStateType,boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (!isAuth) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id:todolistId, filter:value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    if(!isAuth){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error:null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport { combineReducers } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\nexport const store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware:getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\ntype FormValuesType = {\r\n    email:string;\r\n    password:string;\r\n    rememberMe:boolean;\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>((state) => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if(!values.password){\r\n                errors.password = 'Required'\r\n            }else if(values.password.length < 4){\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit:async (values:FormValuesType,formikHelpers:FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(loginTC(values))\r\n            if(loginTC.rejected.match(action) ){\r\n                if(action.payload?.fieldErrors?.length){\r\n                    const error = action.payload?.fieldErrors[0]\r\n                    formikHelpers.setFieldError(error.field,error.error)\r\n                }else{\r\n\r\n                }\r\n            }\r\n        },\r\n    })\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.touched.email&& formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.touched.password&& formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC,  RequestStatusType} from './app-reducer'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {logOutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state)=> state.app.isInitialized)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state)=> state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    const LogOutHandler = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                         <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={LogOutHandler}>Log out</Button>}\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404:PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from ={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}