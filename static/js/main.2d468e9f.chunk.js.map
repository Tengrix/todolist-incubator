{"version":3,"sources":["NewTitle.tsx","EditableSpan.tsx","Task.tsx","NewTitleForTodoList.tsx","Tasks.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Tasks","props","useState","newTitle","setNewTitle","error","setError","className","TextField","variant","type","value","onChange","e","currentTarget","label","helperText","IconButton","color","onClick","trim","addTask","AddBox","EditableSpan","editMode","setEditMode","task","title","autoFocus","onBlur","updateTitle","id","onDoubleClick","Checkbox","checked","isDone","changeTaskStatus","removeTasks","Delete","edit","setEdit","Button","size","updateTodoListTitle","removeTodoLists","filterAllBtnHandler","filter","filterActiveBtnHandler","filterCompletedBtnHandler","NewTitleForTodoList","NewTitle","map","el","Task","changeFilter","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTask","changeFilterTasks","todoListId","newTasks","updatedTodoLists","addTodoList","newTodoList","todoListsId","changedTitle","updatedTodoList","todoListComponents","Grid","item","Paper","elevation","style","padding","addTodoLists","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","container","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RA0CeA,MAjCf,SAAeC,GAAqB,IAAD,EACCC,mBAAiB,IADlB,mBACxBC,EADwB,KACdC,EADc,OAELF,mBAAsB,IAFjB,mBAExBG,EAFwB,KAEjBC,EAFiB,KAgB/B,OACI,sBAAKC,UAAU,MAAf,UACI,cAACC,EAAA,EAAD,CACIC,QAAS,WACTF,UAAWF,EAAM,aAAa,GAC9BK,KAAK,OAAOC,MAAOR,EACnBS,SAVQ,SAACC,GACjBT,EAAYS,EAAEC,cAAcH,OAC5BL,EAAS,KASDS,MAAO,QACPV,QAASA,EACTW,WAAYX,IAEhB,cAACY,EAAA,EAAD,CAAYC,MAAO,UAAWC,QAxBlB,WACbhB,EAASiB,OACRnB,EAAMoB,QAAQlB,EAASiB,QAGvBd,EAAS,sBAEbF,EAAY,KAiBR,SAAoD,cAACkB,EAAA,EAAD,UCNjDC,MAnBf,SAAsBtB,GAA8B,IAAD,EACfC,oBAAkB,GADH,mBACxCsB,EADwC,KAC9BC,EAD8B,OAEfvB,mBAAiBD,EAAMyB,KAAKC,OAFb,mBAExCxB,EAFwC,KAE9BC,EAF8B,KAU/C,OACI,sBAAMG,UAAU,MAAhB,SACKiB,EAAU,cAAChB,EAAA,EAAD,CAAWI,SAJV,SAACC,GAAD,OAAqCT,EAAYS,EAAEC,cAAcH,QAIhCA,MAAOR,EAAUyB,WAAS,EAACC,OAR5D,WAChBJ,GAAY,GACZxB,EAAM6B,YAAY7B,EAAMyB,KAAKK,GAAG5B,EAASF,EAAM8B,KAMkDrB,KAAK,SAC9F,sBAAMsB,cAVC,kBAAMP,GAAY,IAUzB,SAAkCxB,EAAMyB,KAAKC,W,kBCS9C3B,MAlBf,SAAeC,GAEX,OACI,sBAAKM,UAAU,MAAf,UACI,cAAC0B,EAAA,EAAD,CACIC,QAASjC,EAAMyB,KAAKS,OACpBjB,MAAO,UACPN,SAAU,SAACC,GAAKZ,EAAMmC,iBAAiBnC,EAAMyB,KAAKK,GAAG9B,EAAM8B,GAAGlB,EAAEC,cAAcoB,YAElF,cAAC,EAAD,CAAcR,KAAMzB,EAAMyB,KACZI,YAAa7B,EAAM6B,YACnBC,GAAI9B,EAAM8B,KAExB,cAACd,EAAA,EAAD,CAAYE,QAAS,WAAKlB,EAAMoC,YAAYpC,EAAMyB,KAAKK,GAAG9B,EAAM8B,KAAhE,SAAsE,cAACO,EAAA,EAAD,U,SCUnEtC,MA1Bf,SAAeC,GAAsB,IAAD,EACAC,mBAAiB,IADjB,mBACzBC,EADyB,KACfC,EADe,OAERF,oBAAkB,GAFV,mBAEzBqC,EAFyB,KAEnBC,EAFmB,KAWhC,OACI,sBAAKjC,UAAU,MAAf,UACI,+BAAON,EAAM0B,QACZY,GACD,uBAAO7B,KAAK,OAAOC,MAAOR,EAAUS,SAZxB,SAACC,GACjBT,EAAYS,EAAEC,cAAcH,UAYxB,cAAC8B,EAAA,EAAD,CAAQC,KAAM,QAASvB,QAAS,kBAAMqB,GAASD,IAA/C,kBACA,cAACE,EAAA,EAAD,CAAQC,KAAM,QAASvB,QAXH,WACxBlB,EAAM0C,oBAAoBxC,EAAUF,EAAM8B,IAC1C3B,EAAY,IACZoC,GAASD,IAQL,kBACA,eAACtB,EAAA,EAAD,CAAYE,QAAS,WACjBlB,EAAM2C,gBAAgB3C,EAAM8B,KADhC,cAEI,cAACO,EAAA,EAAD,WCyCDtC,MAlDf,SAAeC,GAEX,IAAM4C,EAAuC,QAAjB5C,EAAM6C,OAAmB,YAAc,GAC7DC,EAA0C,WAAjB9C,EAAM6C,OAAsB,YAAc,GACnEE,EAA6C,cAAjB/C,EAAM6C,OAAyB,YAAc,GAI/E,OACI,sBAAKvC,UAAU,MAAf,UACI,cAAC0C,EAAD,CAAqBtB,MAAO1B,EAAM0B,MACbgB,oBAAqB1C,EAAM0C,oBAC3BZ,GAAI9B,EAAM8B,GAC9Ba,gBAAiB3C,EAAM2C,kBACxB,cAACM,EAAD,CAAU7B,QATF,SAACM,GACb1B,EAAMoB,QAAQM,EAAO1B,EAAM8B,OAStB9B,EAAMyB,KAAKyB,KAAI,SAAAC,GAAE,OAAI,cAACC,EAAD,CAEd3B,KAAM0B,EACNhB,iBAAkBnC,EAAMmC,iBACxBL,GAAI9B,EAAM8B,GACVM,YAAapC,EAAMoC,YACnBP,YAAa7B,EAAM6B,aALdsB,EAAGrB,OAQhB,cAACU,EAAA,EAAD,CAAQvB,MAAO,UACPwB,KAAM,QACNjC,QAA0B,QAAjBR,EAAM6C,OAAmB,WAAa,YAC/CvC,UAAWsC,EACX1B,QAAS,WACLlB,EAAMqD,aAAa,MAAOrD,EAAM8B,KAL5C,iBAQA,cAACU,EAAA,EAAD,CAAQvB,MAAO,UACPwB,KAAM,QACNjC,QAA0B,WAAjBR,EAAM6C,OAAsB,WAAa,YAClDvC,UAAWwC,EAAwB5B,QAAS,WAChDlB,EAAMqD,aAAa,SAAUrD,EAAM8B,KAJvC,oBAOA,cAACU,EAAA,EAAD,CAAQvB,MAAO,UACPwB,KAAM,QACNjC,QAA0B,cAAjBR,EAAM6C,OAAyB,WAAa,YACrDvC,UAAWyC,EAA2B7B,QAAS,WACnDlB,EAAMqD,aAAa,YAAarD,EAAM8B,KAJ1C,2B,8DC+FGwB,MArIf,WAAgB,IAAD,EAELC,EAAeC,eACfC,EAAeD,eAHV,EAKuBvD,mBAA0B,CACpD,CAAC6B,GAAIyB,EAAc7B,MAAO,gBAAiBmB,OAAQ,OACnD,CAACf,GAAI2B,EAAc/B,MAAO,gBAAiBmB,OAAQ,YAPhD,mBAKJa,EALI,KAKOC,EALP,OAWa1D,oBAAQ,mBACvBsD,EAAe,CACZ,CAACzB,GAAI0B,eAAM9B,MAAO,QAASQ,QAAQ,GACnC,CAACJ,GAAI0B,eAAM9B,MAAO,OAAQQ,QAAQ,GAClC,CAACJ,GAAI0B,eAAM9B,MAAO,QAASQ,QAAQ,KAJf,cAMvBuB,EAAe,CACZ,CAAC3B,GAAI0B,eAAM9B,MAAO,OAAQQ,QAAQ,GAClC,CAACJ,GAAI0B,eAAM9B,MAAO,MAAOQ,QAAQ,GACjC,CAACJ,GAAI0B,eAAM9B,MAAO,KAAMQ,QAAQ,KATZ,IAXrB,mBAWJT,EAXI,KAWEmC,EAXF,KAyBX,SAASC,EAAkBH,GACvB,OAAQA,EAAUb,QACd,IAAK,SACD,OAAOpB,EAAKiC,EAAU5B,IAAIe,QAAO,SAAAM,GAAE,OAAKA,EAAGjB,UAC/C,IAAK,YACD,OAAOT,EAAKiC,EAAU5B,IAAIe,QAAO,SAAAM,GAAE,OAAIA,EAAGjB,UAC9C,QACI,OAAOT,EAAKiC,EAAU5B,KAIlC,SAASuB,EAAa3C,EAAmBoD,GACrCH,EAAaD,EAAUR,KAAI,SAAAC,GAAE,OAAIA,EAAGrB,KAAOgC,EAAV,2BAA2BX,GAA3B,IAA+BN,OAAQnC,IAASyC,MAGrF,SAASf,EAAYN,EAAYgC,GAC7B,IAAMC,EAAWtC,EAAKqC,GAAYjB,QAAO,SAAAM,GAAE,OAAIA,EAAGrB,KAAOA,KACzD8B,EAAQ,2BAAInC,GAAL,kBAAYqC,EAAaC,KAGpC,SAAS5B,EAAiBL,EAAYgC,EAAoB5B,GACtD,IAAM6B,EAAWtC,EAAKqC,GAAYZ,KAAI,SAAAC,GAAE,OAAIA,EAAGrB,KAAOA,EAAV,2BAAmBqB,GAAnB,IAAuBjB,OAAQA,IAAUiB,KACrFS,EAAQ,2BAAInC,GAAL,kBAAYqC,EAAaC,KAGpC,SAAS3C,EAAQlB,EAAkB4D,GAC/B,IAKMC,EAAQ,CALE,CACZjC,GAAI0B,eACJ9B,MAAOxB,EACPgC,QAAQ,IAEE,mBAAgBT,EAAKqC,KACnCF,EAAQ,2BAAInC,GAAL,kBAAYqC,EAAaC,KAGpC,SAASpB,EAAgBmB,GACrB,IAAME,EAAmBN,EAAUb,QAAO,SAAAM,GAAE,OAAIA,EAAGrB,KAAOgC,KAC1DH,EAAaK,UACNvC,EAAKqC,GAGhB,SAASG,EAAY/D,GACjB,IAAI4D,EAAaN,eACXU,EAA6B,CAC/BpC,GAAIgC,EACJpC,MAAOxB,EACP2C,OAAQ,OAEZc,EAAa,GAAD,mBAAKD,GAAL,CAAgBQ,KAC5BN,EAAQ,2BAAInC,GAAL,kBAAYqC,EAAa,MAGpC,SAASjC,EAAYC,EAAY5B,EAAkBiE,GAC/C,IAAMC,EAAe3C,EAAK0C,GAAajB,KAAI,SAAAC,GAAE,OAAIA,EAAGrB,KAAOA,EAAV,2BAAmBqB,GAAnB,IAAuBzB,MAAOxB,IAAYiD,KAC3FS,EAAQ,2BAAInC,GAAL,kBAAY0C,EAAcC,KAGrC,SAAS1B,EAAoBxC,EAAkB4D,GAC3C,IAAMO,EAAkBX,EAAUR,KAAI,SAAAC,GAAE,OAAIA,EAAGrB,KAAOgC,EAAV,2BAA2BX,GAA3B,IAA+BzB,MAAOxB,IAAYiD,KAC9FQ,EAAaU,GAGjB,IAAMC,EAAqBZ,EAAUR,KAAI,SAAAC,GACrC,OAAO,cAACoB,EAAA,EAAD,CAAMC,MAAM,EAAZ,SACH,cAACC,EAAA,EAAD,CAAOC,UAAW,EAAGC,MAAO,CAACC,QAAS,QAAtC,SACI,cAAC,EAAD,CACO9C,GAAIqB,EAAGrB,GACPL,KAAMoC,EAAkBV,GACxBE,aAAcA,EACdjB,YAAaA,EACbhB,QAASA,EACTyB,OAAQM,EAAGN,OACXnB,MAAOyB,EAAGzB,MACVS,iBAAkBA,EAClBQ,gBAAiBA,EACjBkC,aAAcZ,EACdpC,YAAaA,EACba,oBAAqBA,GAZhBS,EAAGrB,WAkB3B,OACI,sBAAKxB,UAAU,MAAf,UACI,cAACwE,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAAChE,EAAA,EAAD,CAAYiE,KAAK,QAAQhE,MAAM,UAAUiE,aAAW,OAApD,SACI,cAACC,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAY5E,QAAQ,KAApB,uBAGA,cAACgC,EAAA,EAAD,CAAQvB,MAAM,UAAd,wBAGR,eAACoE,EAAA,EAAD,WACI,cAACd,EAAA,EAAD,CAAMe,WAAW,EAAMX,MAAO,CAACC,QAAS,aAAxC,SACI,cAAC3B,EAAD,CAAU7B,QAAS6C,MAEvB,cAACM,EAAA,EAAD,CAAMgB,QAAS,EAAGD,WAAW,EAA7B,SACKhB,WCxINkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2d468e9f.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport { AddBox } from '@material-ui/icons';\n\ntype NewTitleType = {\n    addTask:(newTitle:string) => void;\n}\n\nfunction Tasks(props:NewTitleType) {\n    const [newTitle, setNewTitle] = useState<string>('')\n    const [error, setError] = useState<string|null>('')\n    const changeTitle = () => {\n        if(newTitle.trim()){\n            props.addTask(newTitle.trim())\n        }\n        else{\n            setError('new task required!')\n        }\n        setNewTitle('')\n    }\n    const inputChange = (e:ChangeEvent<HTMLInputElement>) =>{\n        setNewTitle(e.currentTarget.value)\n        setError('')\n    }\n    return (\n        <div className=\"App\">\n            <TextField\n                variant={'outlined'}\n                className={error?'inputError':''}\n                type=\"text\" value={newTitle}\n                onChange={inputChange}\n                label={'Title'}\n                error={!!error}\n                helperText={error}\n            />\n            <IconButton color={'primary'} onClick={changeTitle}><AddBox/></IconButton>\n\n        </div>\n    );\n}\n\nexport default Tasks;\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {AppTaskType} from \"./App\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    task: AppTaskType;\n    updateTitle:(id:string,newTitle:string, todoListsId:string) => void;\n    id: string;\n}\n\nfunction EditableSpan(props:EditableSpanPropsType) {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [newTitle, setNewTitle] = useState<string>(props.task.title)\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.updateTitle(props.task.id,newTitle,props.id)\n    }\n    const changeTitle = (e:ChangeEvent<HTMLInputElement>) => setNewTitle(e.currentTarget.value)\n\n    return (\n        <span className=\"App\">\n            {editMode? <TextField onChange={changeTitle} value={newTitle} autoFocus onBlur={offEditMode} type=\"text\"/>:\n                <span onDoubleClick={onEditMode}>{props.task.title}</span> }\n\n        </span>\n    );\n}\n\nexport default EditableSpan;\n","import React from 'react';\nimport './App.css';\nimport {AppTaskType} from \"./App\";\nimport EditableSpan from \"./EditableSpan\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\ntype TaskType = {\n    id:string\n    task:AppTaskType;\n    changeTaskStatus:(id:string, todoListId: string, isDone: boolean) => void;\n    removeTasks: (id: string, todoListId: string) => void;\n    updateTitle:(id:string,newTitle:string, todoListsId:string) => void;\n}\n\nfunction Tasks(props:TaskType) {\n\n    return (\n        <div className=\"App\">\n            <Checkbox\n                checked={props.task.isDone}\n                color={'primary'}\n                onChange={(e)=>{props.changeTaskStatus(props.task.id,props.id,e.currentTarget.checked)}}\n            />\n            <EditableSpan task={props.task}\n                          updateTitle={props.updateTitle}\n                          id={props.id}\n            />\n            <IconButton onClick={()=>{props.removeTasks(props.task.id,props.id)}}><Delete/></IconButton>\n        </div>\n    );\n}\n\nexport default Tasks;\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\ntype NewTitleType = {\n    id: string\n    title: string;\n    updateTodoListTitle: (newTitle: string, todoListId: string) => void;\n    removeTodoLists: (todoListId: string) => void;\n}\n\nfunction Tasks(props: NewTitleType) {\n    const [newTitle, setNewTitle] = useState<string>('')\n    const [edit, setEdit] = useState<boolean>(false)\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTitle(e.currentTarget.value)\n    }\n    const updateTodoListTitle = () => {\n        props.updateTodoListTitle(newTitle, props.id)\n        setNewTitle('')\n        setEdit(!edit)\n    }\n    return (\n        <div className=\"App\">\n            <span>{props.title}</span>\n            {edit &&\n            <input type=\"text\" value={newTitle} onChange={changeTitle}/>}\n            <Button size={'small'} onClick={() => setEdit(!edit)}>edit</Button>\n            <Button size={'small'} onClick={updateTodoListTitle}>save</Button>\n            <IconButton onClick={() => {\n                props.removeTodoLists(props.id)\n            }}> <Delete/>\n            </IconButton>\n        </div>\n    );\n}\n\nexport default Tasks;\n","import React from 'react';\nimport './App.css';\nimport {AppTaskType, filterType} from \"./App\";\nimport NewTitle from './NewTitle';\nimport Task from './Task';\nimport NewTitleForTodoList from \"./NewTitleForTodoList\";\nimport {Button} from \"@material-ui/core\";\n\ntype TasksType = {\n    id: string;\n    title: string;\n    task: AppTaskType[];\n    changeFilter: (value: filterType, todoListId: string) => void;\n    removeTasks: (id: string, todoListId: string) => void;\n    addTask: (newTitle: string, todoListId: string) => void;\n    filter: filterType;\n    changeTaskStatus: (id: string, todoListId: string, isDone: boolean) => void;\n    removeTodoLists: (todoListId: string) => void;\n    addTodoLists: (title: string) => void;\n    updateTitle: (id: string, newTitle: string, todoListsId: string) => void;\n    updateTodoListTitle: (newTitle: string, todoListId: string) => void;\n}\n\nfunction Tasks(props: TasksType) {\n\n    const filterAllBtnHandler = props.filter === 'all' ? 'activeBtn' : ''\n    const filterActiveBtnHandler = props.filter === 'active' ? 'activeBtn' : ''\n    const filterCompletedBtnHandler = props.filter === 'completed' ? 'activeBtn' : ''\n    const addTask = (title: string) => {\n        props.addTask(title, props.id)\n    }\n    return (\n        <div className=\"App\">\n            <NewTitleForTodoList title={props.title}\n                                 updateTodoListTitle={props.updateTodoListTitle}\n                                 id={props.id}\n             removeTodoLists={props.removeTodoLists}/>\n            <NewTitle addTask={addTask}/>\n            {props.task.map(el => <Task\n                    key={el.id}\n                    task={el}\n                    changeTaskStatus={props.changeTaskStatus}\n                    id={props.id}\n                    removeTasks={props.removeTasks}\n                    updateTitle={props.updateTitle}\n                />\n            )}\n            <Button color={'primary'}\n                    size={'small'}\n                    variant={props.filter === 'all' ? 'outlined' : 'contained'}\n                    className={filterAllBtnHandler}\n                    onClick={() => {\n                        props.changeFilter('all', props.id)\n                    }}>all\n            </Button>\n            <Button color={'primary'}\n                    size={'small'}\n                    variant={props.filter === 'active' ? 'outlined' : 'contained'}\n                    className={filterActiveBtnHandler} onClick={() => {\n                props.changeFilter('active', props.id)\n            }}>active\n            </Button>\n            <Button color={'primary'}\n                    size={'small'}\n                    variant={props.filter === 'completed' ? 'outlined' : 'contained'}\n                    className={filterCompletedBtnHandler} onClick={() => {\n                props.changeFilter('completed', props.id)\n            }}>completed\n            </Button>\n        </div>\n    );\n}\n\nexport default Tasks;\n","import React, {useState} from 'react';\nimport './App.css';\nimport {v1} from 'uuid';\nimport Tasks from './Tasks';\nimport NewTitle from \"./NewTitle\";\nimport {AppBar, Button, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from '@material-ui/icons'\nimport Container from '@material-ui/core/Container'\n\nexport type TodoListsType = {\n    id: string;\n    title: string;\n    filter: filterType\n}\nexport type AppTaskType = {\n    id: string;\n    title: string;\n    isDone: boolean;\n}\nexport type KeyTasksType = {\n    [key: string]: AppTaskType[]\n}\nexport type filterType = 'all' | 'active' | 'completed'\n\nfunction App() {\n\n    const todoListId_1 = v1();\n    const todoListId_2 = v1();\n\n    const [todoLists, setTodoLists] = useState<TodoListsType[]>([\n            {id: todoListId_1, title: 'What to Learn', filter: 'all'},\n            {id: todoListId_2, title: 'What to Study', filter: 'active'},\n        ]\n    )\n\n    const [task, setTask] = useState<KeyTasksType>({\n            [todoListId_1]: [\n                {id: v1(), title: 'Redux', isDone: false},\n                {id: v1(), title: 'Mobx', isDone: false},\n                {id: v1(), title: 'React', isDone: true},\n            ],\n            [todoListId_2]: [\n                {id: v1(), title: 'Html', isDone: true},\n                {id: v1(), title: 'Css', isDone: true},\n                {id: v1(), title: 'JS', isDone: false},\n            ],\n        }\n    )\n\n    function changeFilterTasks(todoLists: TodoListsType) {\n        switch (todoLists.filter) {\n            case 'active':\n                return task[todoLists.id].filter(el => !el.isDone)\n            case 'completed':\n                return task[todoLists.id].filter(el => el.isDone)\n            default:\n                return task[todoLists.id]\n        }\n    }\n\n    function changeFilter(value: filterType, todoListId: string) {\n        setTodoLists(todoLists.map(el => el.id === todoListId ? {...el, filter: value} : el))\n    }\n\n    function removeTasks(id: string, todoListId: string) {\n        const newTasks = task[todoListId].filter(el => el.id !== id)\n        setTask({...task, [todoListId]: newTasks})\n    }\n\n    function changeTaskStatus(id: string, todoListId: string, isDone: boolean) {\n        const newTasks = task[todoListId].map(el => el.id === id ? {...el, isDone: isDone} : el)\n        setTask({...task, [todoListId]: newTasks})\n    }\n\n    function addTask(newTitle: string, todoListId: string) {\n        const newTask = {\n            id: v1(),\n            title: newTitle,\n            isDone: false\n        }\n        const newTasks = [newTask, ...task[todoListId]]\n        setTask({...task, [todoListId]: newTasks})\n    }\n\n    function removeTodoLists(todoListId: string) {\n        const updatedTodoLists = todoLists.filter(el => el.id !== todoListId)\n        setTodoLists(updatedTodoLists)\n        delete task[todoListId]\n    }\n\n    function addTodoList(newTitle: string) {\n        let todoListId = v1()\n        const newTodoList: TodoListsType = {\n            id: todoListId,\n            title: newTitle,\n            filter: 'all'\n        }\n        setTodoLists([...todoLists, newTodoList])\n        setTask({...task, [todoListId]: []})\n    }\n\n    function updateTitle(id: string, newTitle: string, todoListsId: string) {\n        const changedTitle = task[todoListsId].map(el => el.id === id ? {...el, title: newTitle} : el)\n        setTask({...task, [todoListsId]: changedTitle})\n    }\n\n    function updateTodoListTitle(newTitle: string, todoListId: string) {\n        const updatedTodoList = todoLists.map(el => el.id === todoListId ? {...el, title: newTitle} : el)\n        setTodoLists(updatedTodoList)\n    }\n\n    const todoListComponents = todoLists.map(el => {\n        return <Grid item={true}>\n            <Paper elevation={6} style={{padding: '10px'}}>\n                <Tasks key={el.id}\n                       id={el.id}\n                       task={changeFilterTasks(el)}\n                       changeFilter={changeFilter}\n                       removeTasks={removeTasks}\n                       addTask={addTask}\n                       filter={el.filter}\n                       title={el.title}\n                       changeTaskStatus={changeTaskStatus}\n                       removeTodoLists={removeTodoLists}\n                       addTodoLists={addTodoList}\n                       updateTitle={updateTitle}\n                       updateTodoListTitle={updateTodoListTitle}\n                />\n            </Paper>\n        </Grid>\n    })\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        TodoLists\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container>\n                <Grid container={true} style={{padding: '20px 0px '}}>\n                    <NewTitle addTask={addTodoList}/>\n                </Grid>\n                <Grid spacing={3} container={true}>\n                    {todoListComponents}\n                </Grid>\n            </Container>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}