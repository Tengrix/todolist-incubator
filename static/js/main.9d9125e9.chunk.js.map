{"version":3,"sources":["NewTitle.tsx","EditableSpan.tsx","Task.tsx","NewTitleForTodoList.tsx","Tasks.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Tasks","props","useState","newTitle","setNewTitle","error","setError","className","type","value","onChange","e","currentTarget","onClick","trim","addTask","EditableSpan","editMode","setEditMode","task","title","autoFocus","onBlur","updateTitle","id","onDoubleClick","checked","isDone","changeTaskStatus","removeTasks","edit","setEdit","updateTodoListTitle","filterAllBtnHandler","filter","filterActiveBtnHandler","filterCompletedBtnHandler","NewTitleForTodoList","removeTodoLists","NewTitle","map","el","Task","changeFilter","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTask","changeFilterTasks","todoListId","newTasks","updatedTodoLists","addTodoList","newTodoList","todoListsId","changedTitle","updatedTodoList","addTodoLists","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d9125e9.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\n\ntype NewTitleType = {\n    addTask:(newTitle:string) => void;\n}\n\nfunction Tasks(props:NewTitleType) {\n    const [newTitle, setNewTitle] = useState<string>('')\n    const [error, setError] = useState<string>('')\n    const changeTitle = () => {\n        if(newTitle.trim()){\n            props.addTask(newTitle.trim())\n        }\n        else{\n            setError('new task required!')\n        }\n        setNewTitle('')\n    }\n    const inputChange = (e:ChangeEvent<HTMLInputElement>) =>{\n        setNewTitle(e.currentTarget.value)\n        setError('')\n    }\n    return (\n        <div className=\"App\">\n            <input className={error?'inputError':''} type=\"text\" value={newTitle}  onChange={inputChange}/>\n            <button onClick={changeTitle}>+</button>\n            {error? <div className={'error'}>{error}</div>:''}\n        </div>\n    );\n}\n\nexport default Tasks;\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {AppTaskType} from \"./App\";\n\ntype EditableSpanPropsType = {\n    task: AppTaskType;\n    updateTitle:(id:string,newTitle:string, todoListsId:string) => void;\n    id: string;\n}\n\nfunction EditableSpan(props:EditableSpanPropsType) {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [newTitle, setNewTitle] = useState<string>(props.task.title)\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.updateTitle(props.task.id,newTitle,props.id)\n    }\n    const changeTitle = (e:ChangeEvent<HTMLInputElement>) => setNewTitle(e.currentTarget.value)\n\n    return (\n        <span className=\"App\">\n            {editMode? <input onChange={changeTitle} value={newTitle} autoFocus onBlur={offEditMode} type=\"text\"/>:\n                <span onDoubleClick={onEditMode}>{props.task.title}</span> }\n\n        </span>\n    );\n}\n\nexport default EditableSpan;\n","import React from 'react';\nimport './App.css';\nimport {AppTaskType} from \"./App\";\nimport EditableSpan from \"./EditableSpan\";\n\ntype TaskType = {\n    id:string\n    task:AppTaskType;\n    changeTaskStatus:(id:string, todoListId: string, isDone: boolean) => void;\n    removeTasks: (id: string, todoListId: string) => void;\n    updateTitle:(id:string,newTitle:string, todoListsId:string) => void;\n}\n\nfunction Tasks(props:TaskType) {\n\n    return (\n        <div className=\"App\">\n            <input type=\"checkbox\" checked={props.task.isDone}\n                   onChange={(e)=>{props.changeTaskStatus(props.task.id,props.id,e.currentTarget.checked)}}/>\n            <EditableSpan task={props.task}\n                          updateTitle={props.updateTitle}\n                          id={props.id}\n            />\n            <button onClick={()=>{props.removeTasks(props.task.id,props.id)}}>x</button>\n        </div>\n    );\n}\n\nexport default Tasks;\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\n\ntype NewTitleType = {\n    id: string\n    title: string;\n    updateTodoListTitle: (newTitle: string, todoListId: string) => void;\n}\n\nfunction Tasks(props: NewTitleType) {\n    const [newTitle, setNewTitle] = useState<string>('')\n    const [edit, setEdit] = useState<boolean>(false)\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTitle(e.currentTarget.value)\n    }\n    const updateTodoListTitle = () => {\n        props.updateTodoListTitle(newTitle, props.id)\n        setNewTitle('')\n        setEdit(!edit)\n    }\n    return (\n        <div className=\"App\">\n            <span>{props.title}</span>\n            {edit &&\n            <input type=\"text\" value={newTitle} onChange={changeTitle}/>}\n            <button onClick={() => setEdit(!edit)}>edit</button>\n            <button onClick={updateTodoListTitle}>save</button>\n        </div>\n    );\n}\n\nexport default Tasks;\n","import React from 'react';\nimport './App.css';\nimport {AppTaskType, filterType} from \"./App\";\nimport NewTitle from './NewTitle';\nimport Task from './Task';\nimport NewTitleForTodoList from \"./NewTitleForTodoList\";\n\ntype TasksType = {\n    id: string;\n    title: string;\n    task: AppTaskType[];\n    changeFilter: (value: filterType, todoListId: string) => void;\n    removeTasks: (id: string, todoListId: string) => void;\n    addTask: (newTitle: string, todoListId: string) => void;\n    filter: filterType;\n    changeTaskStatus: (id: string, todoListId: string, isDone: boolean) => void;\n    removeTodoLists:(todoListId:string) => void;\n    addTodoLists:(title:string) => void;\n    updateTitle:(id:string,newTitle:string, todoListsId:string) => void;\n    updateTodoListTitle:(newTitle:string, todoListId:string) => void;\n}\n\nfunction Tasks(props: TasksType) {\n\n    const filterAllBtnHandler = props.filter === 'all' ? 'activeBtn' : ''\n    const filterActiveBtnHandler = props.filter === 'active' ? 'activeBtn' : ''\n    const filterCompletedBtnHandler = props.filter === 'completed' ? 'activeBtn' : ''\n    const addTask = (title:string) => {props.addTask(title, props.id)}\n    return (\n        <div className=\"App\">\n            <NewTitleForTodoList title={props.title}\n                                 updateTodoListTitle={props.updateTodoListTitle}\n                                 id={props.id}\n            />\n                                 <button onClick={()=>{props.removeTodoLists(props.id)}}>x</button>\n            <NewTitle addTask={addTask} />\n            {props.task.map(el => <Task\n                key={el.id}\n                task={el}\n                changeTaskStatus={props.changeTaskStatus}\n                id={props.id}\n                removeTasks={props.removeTasks}\n                updateTitle={props.updateTitle}\n                />\n            )}\n            <button className={filterAllBtnHandler} onClick={() => {\n                props.changeFilter('all', props.id)\n            }}>all\n            </button>\n            <button className={filterActiveBtnHandler} onClick={() => {\n                props.changeFilter('active', props.id)\n            }}>active\n            </button>\n            <button className={filterCompletedBtnHandler} onClick={() => {\n                props.changeFilter('completed', props.id)\n            }}>completed\n            </button>\n        </div>\n    );\n}\n\nexport default Tasks;\n","import React, {useState} from 'react';\nimport './App.css';\nimport {v1} from 'uuid';\nimport Tasks from './Tasks';\nimport NewTitle from \"./NewTitle\";\n\nexport type TodoListsType = {\n    id: string;\n    title: string;\n    filter: filterType\n}\nexport type AppTaskType = {\n    id: string;\n    title: string;\n    isDone: boolean;\n}\nexport type KeyTasksType = {\n    [key: string]: AppTaskType[]\n}\nexport type filterType = 'all' | 'active' | 'completed'\n\nfunction App() {\n\n    const todoListId_1 = v1();\n    const todoListId_2 = v1();\n\n    const [todoLists, setTodoLists] = useState<TodoListsType[]>([\n            {id: todoListId_1, title: 'What to Learn', filter: 'all'},\n            {id: todoListId_2, title: 'What to Study', filter: 'active'},\n        ]\n    )\n\n    const [task, setTask] = useState<KeyTasksType>({\n            [todoListId_1]: [\n                {id: v1(), title: 'Redux', isDone: false},\n                {id: v1(), title: 'Mobx', isDone: false},\n                {id: v1(), title: 'React', isDone: true},\n            ],\n            [todoListId_2]: [\n                {id: v1(), title: 'Html', isDone: true},\n                {id: v1(), title: 'Css', isDone: true},\n                {id: v1(), title: 'JS', isDone: false},\n            ],\n        }\n    )\n\n    function changeFilterTasks(todoLists: TodoListsType) {\n        switch (todoLists.filter) {\n            case 'active':\n                return task[todoLists.id].filter(el => !el.isDone)\n            case 'completed':\n                return task[todoLists.id].filter(el => el.isDone)\n            default:\n                return task[todoLists.id]\n        }\n    }\n\n    function changeFilter(value: filterType, todoListId: string) {\n        setTodoLists(todoLists.map(el => el.id === todoListId ? {...el, filter: value} : el))\n    }\n\n    function removeTasks(id: string, todoListId: string) {\n        const newTasks = task[todoListId].filter(el => el.id !== id)\n        setTask({...task, [todoListId]: newTasks})\n    }\n\n    function changeTaskStatus(id: string, todoListId: string, isDone: boolean) {\n        const newTasks = task[todoListId].map(el => el.id === id ? {...el, isDone: isDone} : el)\n        setTask({...task, [todoListId]: newTasks})\n    }\n\n    function addTask(newTitle: string, todoListId: string) {\n        const newTask = {\n            id: v1(),\n            title: newTitle,\n            isDone: false\n        }\n        const newTasks = [newTask, ...task[todoListId]]\n        setTask({...task, [todoListId]: newTasks})\n    }\n\n    function removeTodoLists(todoListId: string) {\n        const updatedTodoLists = todoLists.filter(el => el.id !== todoListId)\n        setTodoLists(updatedTodoLists)\n        delete task[todoListId]\n    }\n\n    function addTodoList(newTitle:string){\n        let todoListId = v1()\n        const newTodoList : TodoListsType = {\n            id:todoListId,\n            title: newTitle,\n            filter: 'all'\n        }\n        setTodoLists([...todoLists, newTodoList])\n        setTask({...task, [todoListId]:[]})\n    }\n\n    function updateTitle(id:string,newTitle:string,todoListsId:string) {\n        const changedTitle = task[todoListsId].map(el=>el.id===id?{...el,title:newTitle}:el)\n        setTask({...task,[todoListsId]:changedTitle})\n    }\n\n    function updateTodoListTitle(newTitle:string, todoListId:string){\n        const updatedTodoList = todoLists.map(el=> el.id === todoListId? {...el, title:newTitle}:el)\n        setTodoLists(updatedTodoList)\n    }\n\n    return (\n        <div className=\"App\">\n            <NewTitle addTask={addTodoList}/>\n            {todoLists.map(el => {\n                return <Tasks key={el.id}\n                              id={el.id}\n                              task={changeFilterTasks(el)}\n                              changeFilter={changeFilter}\n                              removeTasks={removeTasks}\n                              addTask={addTask}\n                              filter={el.filter}\n                              title={el.title}\n                              changeTaskStatus={changeTaskStatus}\n                              removeTodoLists={removeTodoLists}\n                              addTodoLists={addTodoList}\n                              updateTitle={updateTitle}\n                              updateTodoListTitle={updateTodoListTitle}\n                />\n            })}\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}