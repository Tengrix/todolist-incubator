{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.tsx","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","isInitializedAc","appReducer","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","type","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","isAuth","auth","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59c227d3.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1eaa5d66-d310-487c-a1d0-2fd59af6c2de'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data)\r\n    },\r\n    authMe() {\r\n        return instance.get<ResponseType<{ data: AuthMeType }>>('auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n\r\n}\r\n\r\n// types\r\ntype AuthMeType = {\r\n    id:number;\r\n    email:string;\r\n    login:string;\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe?: boolean;\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, setAppErrorACType, setAppStatusAC, setAppStatusACType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<setAppErrorACType | setAppStatusACType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<setAppErrorACType | setAppStatusACType>) => {\r\n    dispatch(setAppErrorAC({error:error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppErrorACType, setAppStatusAC, setAppStatusACType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {action} from \"@storybook/addon-actions\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.login(data).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n            dispatch(setAppStatusAC({status:'loading'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch(() => {\r\n\r\n        })\r\n}\r\nexport const logOutTC = () => (dispatch: Dispatch) => {\r\n    authAPI.logout().then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value:false}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    }).catch(() => {\r\n\r\n    })\r\n}\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | setAppStatusACType | setAppErrorACType","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name:'app',\r\n    initialState:initialState,\r\n    reducers:{\r\n        isInitializedAc:(state, action:PayloadAction<{isInitialized:boolean}>)=>{\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n        setAppErrorAC:(state, action:PayloadAction<{error:string|null}>)=>{\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC:(state, action:PayloadAction<{status:RequestStatusType}>)=>{\r\n            state.status = action.payload.status\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\nexport const appReducer = slice.reducer\r\nexport const {isInitializedAc, setAppStatusAC, setAppErrorAC} = slice.actions\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n\r\n    authAPI.authMe().then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            debugger\r\n            dispatch(setIsLoggedInAC({value:true}))\r\n        } else {\r\n        }\r\n    })\r\n        .catch(()=>{\r\n\r\n        })\r\n        .finally(()=>{\r\n            dispatch(isInitializedAc({isInitialized:true}))\r\n        })\r\n}\r\n\r\nexport type setAppStatusACType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorACType = ReturnType<typeof setAppErrorAC>","import {authAPI, todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, setAppStatusACType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | setAppStatusACType>\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorACType, setAppStatusAC, setAppStatusACType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | setAppStatusACType>) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | setAppErrorACType | setAppStatusACType>) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | setAppStatusACType | setAppErrorACType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isAuth = useSelector<AppRootStateType,boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (!isAuth) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    if(!isAuth){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error:null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppRootStateType,boolean>((state) => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if(!values.password){\r\n                errors.password = 'Required'\r\n            }else if(values.password.length < 4){\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n    if(isAuth){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.touched.email&& formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.touched.password&& formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC,  RequestStatusType} from './app-reducer'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {logOutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state)=> state.app.isInitialized)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state)=> state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    const LogOutHandler = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n\r\n    if (!isInitialized) {\r\n        debugger\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                         <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={LogOutHandler}>Log out</Button>}\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404:PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from ={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware:getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}