{"version":3,"sources":["api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","taskTitle","model","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","Checkbox","Delete","initialState","Todolist","dispatch","useDispatch","useEffect","getState","then","res","type","tasks","data","items","todoListId","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","map","style","paddingTop","Button","fetchTodosThunk","todos","App","todolists","useSelector","state","removeTaskAC","delTasksThunk","item","addTaskAC","addTaskThunk","changeStatus","allTasks","find","el","deadline","description","startDate","priority","changeTaskStatusAC","updateTaskStatusThunk","newTitle","changeTaskTitleAC","changeTaskTitleThunk","action","fetchDelTodoLists","changeTodolistTitleAC","fetchChangeTodoListTitle","addTodolist","todolist","fetchAddTodoList","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","newTasks","todolistTasks","newTasksArray","copyState","forEach","newTodolist","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45f86eeb.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1eaa5d66-d310-487c-a1d0-2fd59af6c2de'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {TasksStateType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, setTodosAC, setTodosActionType} from './todolists-reducer';\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    TodolistType,\r\n    UpdateTaskModelType\r\n} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task:TaskType\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | setTodosActionType\r\n    | setTasksType\r\n\r\nconst initialState: TasksStateType = {\r\n    // 'id1': [],\r\n    // 'id2': [],\r\n    // 'id3': []\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"SET-TASK\": {\r\n            let stateCopy = {...state}\r\n            stateCopy[action.todoListId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? { ...t, status: action.status } : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? { ...t, title: action.title } : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((el)=>{\r\n                stateCopy[el.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\nexport const setTasks = (tasks:TaskType[], todoListId:string) => {\r\n    return {\r\n        type : 'SET-TASK',\r\n        tasks,\r\n        todoListId\r\n    } as const\r\n}\r\nexport type setTasksType = ReturnType<typeof setTasks>\r\n\r\nexport const fetchTasksThunk= (todolistId:string) => (dispatch:Dispatch, getState: () => AppRootStateType) => {\r\n    // 1. side Effects\r\n    todolistsAPI.getTasks(todolistId).then((res) => {\r\n        // 2. dispatch Actions\r\n        dispatch(setTasks(res.data.items, todolistId))\r\n    })\r\n}\r\nexport const delTasksThunk = (taskId: string, todolistId: string) => (dispatch:Dispatch) => {\r\n    todolistsAPI.deleteTask(taskId, todolistId).then(() => {\r\n        dispatch(removeTaskAC(todolistId, taskId))\r\n    })\r\n}\r\n\r\nexport const addTaskThunk = (title: string, todolistId: string) => (dispatch:Dispatch) => {\r\n    todolistsAPI.createTask(todolistId,title).then((res)=> {\r\n        let task = res.data.data.item\r\n        dispatch(addTaskAC(task))\r\n    })\r\n}\r\nexport const changeTaskTitleThunk = (taskId: string, title: string, todolistId: string) => (dispatch:Dispatch, getState: () => AppRootStateType) => {\r\n    let state = getState()\r\n    const allTasks = state.tasks[todolistId].find((el) => {\r\n        return el.id === taskId\r\n    })\r\n    if (allTasks) {\r\n        const model: UpdateTaskModelType = {\r\n            title: title,\r\n            status: allTasks.status,\r\n            deadline: allTasks.deadline,\r\n            description: allTasks.description,\r\n            startDate: allTasks.startDate,\r\n            priority: allTasks.priority\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, model).then((res) => {\r\n            dispatch(changeTaskTitleAC(taskId, title, todolistId))\r\n        })\r\n    }\r\n}\r\nexport const updateTaskStatusThunk = (id: string, status: TaskStatuses, todolistId: string) => (dispatch:Dispatch, getState:()=> AppRootStateType) => {\r\n    let state = getState()\r\n    const allTasks = state.tasks[todolistId].find((el) => {\r\n        return el.id === id\r\n    })\r\n    if (allTasks) {\r\n        const model: UpdateTaskModelType = {\r\n            title: allTasks.title,\r\n            status: status,\r\n            deadline: allTasks.deadline,\r\n            description: allTasks.description,\r\n            startDate: allTasks.startDate,\r\n            priority: allTasks.priority\r\n        }\r\n        todolistsAPI.updateTask(todolistId, id, model).then((res) => {\r\n            dispatch(changeTaskStatusAC(id, status, todolistId))\r\n        })\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType, todolistsAPI} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {delTasksThunk, fetchTasksThunk} from \"./state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n            dispatch(fetchTasksThunk(props.id))\r\n    },[])\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    todolist:TodolistType\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | setTodosActionType\r\n\r\nconst initialState: Array<TodolistDomainType> =  [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const newTodolist: TodolistDomainType = {...action.todolist, filter:'all'}\r\n            return [newTodolist, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case \"SET-TODOLISTS\":\r\n            return action.todos.map(el => {\r\n                return {...el, filter: 'all'}\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (todolist:TodolistType): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', todolist}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const setTodosAC = (todos: TodolistType[]) => {\r\n    return { type: 'SET-TODOLISTS',\r\n        todos\r\n    } as const\r\n}\r\nexport type setTodosActionType = ReturnType<typeof setTodosAC>\r\n\r\nexport const fetchTodosThunk = (dispatch:Dispatch, getState: () => AppRootStateType) => {\r\n    // 1. side Effects\r\n    todolistsAPI.getTodolists().then((res) => {\r\n        // 2. dispatch Actions\r\n        dispatch(setTodosAC(res.data))\r\n    })\r\n}\r\n\r\nexport const fetchDelTodoLists = (id:string) => {\r\n    return (dispatch:Dispatch) => {\r\n        todolistsAPI.deleteTodolist(id).then((res) => {\r\n            dispatch(removeTodolistAC(id))\r\n        })\r\n    }\r\n}\r\n\r\nexport const fetchAddTodoList = (title:string) => {\r\n    return (dispatch:Dispatch)=>{\r\n        todolistsAPI.createTodolist(title).then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n    }\r\n}\r\nexport const fetchChangeTodoListTitle = (id: string, title: string) => {\r\n    return (dispatch:Dispatch)=>{\r\n        todolistsAPI.updateTodolist(id, title).then((res) => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n        })\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC, fetchAddTodoList, fetchChangeTodoListTitle, fetchDelTodoLists, fetchTodosThunk,\r\n    FilterValuesType,\r\n    removeTodolistAC, setTodosAC,\r\n    TodolistDomainType\r\n} from './state/todolists-reducer'\r\nimport {\r\n    addTaskAC, addTaskThunk,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC, changeTaskTitleThunk,\r\n    delTasksThunk,\r\n    fetchTasksThunk,\r\n    removeTaskAC, updateTaskStatusThunk\r\n} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType, todolistsAPI, TodolistType} from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    useEffect(() => {\r\n            dispatch(fetchTodosThunk)\r\n    },[])\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(delTasksThunk(todolistId, id))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskThunk(title,todolistId));\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n\r\n        dispatch(updateTaskStatusThunk(id, status, todolistId))\r\n\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        debugger\r\n        dispatch(changeTaskTitleThunk(id, newTitle, todolistId));\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(fetchDelTodoLists(id));\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(fetchChangeTodoListTitle(id,title));\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title:string) => {\r\n        dispatch(fetchAddTodoList(title));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}