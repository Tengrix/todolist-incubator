{"version":3,"sources":["reportWebVitals.ts","state/task-reducer.ts","state/todolists-reducer.ts","state/store.ts","NewTitle.tsx","EditableSpan.tsx","Task.tsx","NewTitleForTodoList.tsx","Tasks.tsx","AppWithRedux.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","tasks","state","action","type","stateCopy","todoListId","filter","el","id","newTask","v1","title","newTitle","isDone","todolistTasks","map","todolists","newTodoList","value","store","createStore","window","NewTitle","React","memo","props","useState","setNewTitle","error","setError","className","TextField","variant","onChange","e","currentTarget","label","helperText","IconButton","color","onClick","trim","addTask","AddBox","EditableSpan","editMode","setEditMode","task","autoFocus","onBlur","updateTitle","onDoubleClick","Task","console","log","onRemoveTaskHandler","useCallback","removeTasks","Checkbox","checked","changeTaskStatus","Delete","NewTitleForTodoList","edit","setEdit","Button","size","updateTodoListTitle","removeTodoLists","Tasks","filterAllBtnHandler","filterActiveBtnHandler","filterCompletedBtnHandler","taskFilter","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","AppWithRedux","todoLists","useSelector","dispatch","useDispatch","removeTaskAC","changeTaskStatusAC","addTaskAC","todoListsId","changeTaskTitleAC","changeTodoListFilterAC","addTodoList","addTodoListAC","changeTodoListTitleAC","todoListComponents","Grid","item","Paper","elevation","style","padding","addTodoLists","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","container","spacing","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2cb072b.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {KeyTasksType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType} from \"./todolists-reducer\";\r\n\r\ntype ReducerActionType = RemoveTaskTypeAT |\r\n    addTaskAT |\r\n    changeTaskStatusAT |\r\n    changeTaskTitleAT |\r\n    AddTodoListActionType|\r\n    RemoveTodoListActionType\r\ntype RemoveTaskTypeAT = {\r\n    type: 'REMOVE-TASK';\r\n    id: string;\r\n    todoListId: string;\r\n}\r\ntype addTaskAT = {\r\n    type: 'ADD-TASK';\r\n    newTitle: string;\r\n    todoListId: string;\r\n}\r\n\r\ntype changeTaskStatusAT = {\r\n    type: 'CHANGE-TASK-STATUS';\r\n    id:string;\r\n    todoListId:string;\r\n    isDone: boolean;\r\n\r\n}\r\n\r\ntype changeTaskTitleAT = {\r\n    type : 'CHANGE-TASK-TITLE'\r\n    id: string;\r\n    newTitle: string;\r\n    todoListId: string\r\n}\r\n\r\nlet initialState:KeyTasksType = {}\r\n\r\nexport const taskReducer = (state:KeyTasksType = initialState, action:ReducerActionType):KeyTasksType =>{\r\n    switch (action.type){\r\n        case \"REMOVE-TASK\":{\r\n            let stateCopy = {...state}\r\n            stateCopy[action.todoListId] = stateCopy[action.todoListId].filter(el => el.id !== action.id)\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\":{\r\n            let stateCopy = {...state}\r\n            const newTask = {\r\n                id: v1(),\r\n                title: action.newTitle,\r\n                isDone: false\r\n            }\r\n            stateCopy[action.todoListId] = [newTask, ...stateCopy[action.todoListId]]\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-STATUS\":{\r\n            let todolistTasks = state[action.todoListId]\r\n            state[action.todoListId] = todolistTasks.map(el => el.id === action.id ? {\r\n                ...el,\r\n                isDone: action.isDone\r\n            } : el)\r\n            return ({...state})\r\n        }\r\n        case 'CHANGE-TASK-TITLE':{\r\n            let stateCopy = {...state}\r\n            stateCopy[action.todoListId] = stateCopy[action.todoListId].map(el => el.id === action.id ? {...el, title:action.newTitle} : el)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TODOLIST':{\r\n            return {...state, [action.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\":{\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.todoListId]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (id: string, todoListId: string):RemoveTaskTypeAT => {\r\n    return {type:'REMOVE-TASK',id,todoListId }\r\n}\r\nexport const addTaskAC = (newTitle: string, todoListId: string):addTaskAT => {\r\n    return {type:'ADD-TASK', newTitle, todoListId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (id: string, todoListId: string, isDone: boolean):changeTaskStatusAT  => {\r\n    return {type: 'CHANGE-TASK-STATUS', id, todoListId, isDone}\r\n}\r\n\r\nexport const changeTaskTitleAC = (id: string, newTitle: string, todoListId: string): changeTaskTitleAT => {\r\n    return {type: 'CHANGE-TASK-TITLE', id, newTitle, todoListId}\r\n}\r\n","import {filterType, TodoListsType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype ReducerActionType = ChangeTodoListFilterActionType|RemoveTodoListActionType|AddTodoListActionType|ChangeTodoListTitleActionType\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST';\r\n    todoListId: string;\r\n\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST';\r\n    newTitle: string;\r\n    id: string;\r\n}\r\ntype ChangeTodoListTitleActionType = {\r\n    type:'CHANGE-TODOLIST-TITLE';\r\n    newTitle:string;\r\n    todoListId:string;\r\n}\r\ntype ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER';\r\n    value:filterType;\r\n    todoListId:string;\r\n}\r\nlet initialState: TodoListsType[] = []\r\n\r\nexport const todoListsReducer = (state:TodoListsType[] = initialState, action: ReducerActionType):TodoListsType[] => {\r\n    switch (action.type){\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(el => el.id !== action.todoListId)\r\n        case 'ADD-TODOLIST':\r\n            const newTodoList: TodoListsType = {\r\n                id: action.id,\r\n                title: action.newTitle,\r\n                filter: 'all'\r\n            }\r\n            return [...state, newTodoList]\r\n        case \"CHANGE-TODOLIST-TITLE\":{\r\n\r\n            return state.map(el => el.id === action.todoListId ? {...el, title: action.newTitle} : el)\r\n        }\r\n\r\n        case \"CHANGE-TODOLIST-FILTER\":{\r\n\r\n            return state.map(el => el.id === action.todoListId ? {...el, filter: action.value} : el)\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (id:string): RemoveTodoListActionType => {\r\n    return {type: \"REMOVE-TODOLIST\", todoListId: id}\r\n}\r\nexport const addTodoListAC = (newTitle:string): AddTodoListActionType => {\r\n    return {type: 'ADD-TODOLIST', newTitle, id: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (newTitle:string, todoListId:string): ChangeTodoListTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', newTitle, todoListId}\r\n}\r\nexport const changeTodoListFilterAC = (value:filterType, todoListId:string): ChangeTodoListFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', value, todoListId}\r\n}","\r\n\r\nimport {taskReducer} from './task-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport { AddBox } from '@material-ui/icons';\n\nexport type NewTitleType = {\n    addTask:(newTitle:string) => void;\n}\n\nexport const  NewTitle = React.memo(function (props:NewTitleType){\n    const [newTitle, setNewTitle] = useState<string>('')\n    const [error, setError] = useState<string|null>('')\n    const changeTitle = () => {\n        if(newTitle.trim()){\n            props.addTask(newTitle.trim())\n        }\n        else{\n            setError('new task required!')\n        }\n        setNewTitle('')\n    }\n    const inputChange = (e:ChangeEvent<HTMLInputElement>) =>{\n        setNewTitle(e.currentTarget.value)\n        setError('')\n    }\n    return (\n        <div className=\"App\">\n            <TextField\n                variant={'outlined'}\n                className={error?'inputError':''}\n                type=\"text\" value={newTitle}\n                onChange={inputChange}\n                label={'Title'}\n                error={!!error}\n                helperText={error}\n            />\n            <IconButton color={'primary'} onClick={changeTitle}><AddBox/></IconButton>\n\n        </div>\n    );\n})\n\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {AppTaskType} from \"./AppWithRedux\";\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanPropsType = {\n    task: AppTaskType;\n    updateTitle:(id:string,newTitle:string, todoListsId:string) => void;\n    id: string;\n}\n\nconst EditableSpan = React.memo(function (props:EditableSpanPropsType) {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [newTitle, setNewTitle] = useState<string>(props.task.title)\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.updateTitle(props.task.id,newTitle,props.id)\n    }\n    const changeTitle = (e:ChangeEvent<HTMLInputElement>) => setNewTitle(e.currentTarget.value)\n\n    return (\n        <span className=\"App\">\n            {editMode? <TextField onChange={changeTitle} value={newTitle} autoFocus onBlur={offEditMode} type=\"text\"/>:\n                <span onDoubleClick={onEditMode}>{props.task.title}</span> }\n\n        </span>\n    );\n})\n\nexport default EditableSpan;\n","import React, {ChangeEvent, useCallback} from 'react';\nimport './App.css';\nimport {AppTaskType} from \"./AppWithRedux\";\nimport EditableSpan from \"./EditableSpan\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\nexport type TaskType = {\n    id:string\n    task:AppTaskType;\n    changeTaskStatus:(id:string, todoListId: string, isDone: boolean) => void;\n    removeTasks: (id: string, todoListId: string) => void;\n    updateTitle:(id:string,newTitle:string, todoListsId:string) => void;\n}\n\nconst Task = React.memo(function (props:TaskType) {\n    console.log('asdasd')\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>)=>{\n        props.changeTaskStatus(props.task.id,props.id,e.currentTarget.checked)\n    }\n    const onRemoveTaskHandler = useCallback(() => {\n        props.removeTasks(props.task.id,props.id)\n    },[])\n    return (\n        <div className=\"App\">\n            <Checkbox\n                checked={props.task.isDone}\n                color={'primary'}\n                onChange={onChangeHandler}\n            />\n            <EditableSpan task={props.task}\n                          updateTitle={props.updateTitle}\n                          id={props.id}\n            />\n            <IconButton onClick={onRemoveTaskHandler}><Delete/></IconButton>\n        </div>\n    );\n})\n\nexport default Task;\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\ntype NewTitleType = {\n    id: string\n    title: string;\n    updateTodoListTitle: (newTitle: string, todoListId: string) => void;\n    removeTodoLists: (todoListId: string) => void;\n}\n\nfunction NewTitleForTodoList(props: NewTitleType) {\n    const [newTitle, setNewTitle] = useState<string>('')\n    const [edit, setEdit] = useState<boolean>(false)\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTitle(e.currentTarget.value)\n    }\n    const updateTodoListTitle = () => {\n        props.updateTodoListTitle(newTitle, props.id)\n        setNewTitle('')\n        setEdit(!edit)\n    }\n    return (\n        <div className=\"App\">\n            <span>{props.title}</span>\n            {edit &&\n            <input type=\"text\" value={newTitle} onChange={changeTitle}/>}\n            <Button size={'small'} onClick={() => setEdit(!edit)}>edit</Button>\n            <Button size={'small'} onClick={updateTodoListTitle}>save</Button>\n            <IconButton onClick={() => {\n                props.removeTodoLists(props.id)\n            }}> <Delete/>\n            </IconButton>\n        </div>\n    );\n}\n\nexport default NewTitleForTodoList;\n","import React, {useCallback} from 'react';\nimport './App.css';\nimport {AppTaskType, filterType, TodoListsType} from \"./AppWithRedux\";\nimport {NewTitle} from './NewTitle';\nimport Task from './Task';\nimport NewTitleForTodoList from \"./NewTitleForTodoList\";\nimport {Button} from \"@material-ui/core\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\n\ntype TasksType = {\n    id: string;\n    title: string;\n    task: AppTaskType[];\n    changeFilter: (value: filterType, todoListId: string) => void;\n    removeTasks: (id: string, todoListId: string) => void;\n    addTask: (newTitle: string, todoListId: string) => void;\n    filter: filterType;\n    changeTaskStatus: (id: string, todoListId: string, isDone: boolean) => void;\n    removeTodoLists: (todoListId: string) => void;\n    addTodoLists: (title: string) => void;\n    updateTitle: (id: string, newTitle: string, todoListsId: string) => void;\n    updateTodoListTitle: (newTitle: string, todoListId: string) => void;\n}\n\nexport const Tasks = React.memo(function (props: TasksType) {\n\n    const filterAllBtnHandler = props.filter === 'all' ? 'activeBtn' : ''\n    const filterActiveBtnHandler = props.filter === 'active' ? 'activeBtn' : ''\n    const filterCompletedBtnHandler = props.filter === 'completed' ? 'activeBtn' : ''\n    const addTask = useCallback( (title: string) => {\n        props.addTask(title, props.id)\n    },[props])\n    let taskFilter = props.task\n    if(props.filter === 'active'){\n        taskFilter = props.task.filter(el=> !el.isDone)\n    }\n    if(props.filter === 'completed'){\n        taskFilter = props.task.filter(el => el.isDone)\n    }\n    const onAllClickHandler = useCallback(()=>props.changeFilter('all',props.id),[props.changeFilter,props.id])\n    const onActiveClickHandler = useCallback(()=>props.changeFilter('active',props.id),[props.changeFilter,props.id])\n    const onCompletedClickHandler = useCallback(()=>props.changeFilter('completed',props.id),[props.changeFilter,props.id])\n\n    return (\n        <div className=\"App\">\n            <NewTitleForTodoList key={props.id}\n                                 title={props.title}\n                                 updateTodoListTitle={props.updateTodoListTitle}\n                                 id={props.id}\n                                 removeTodoLists={props.removeTodoLists}\n            />\n            <NewTitle addTask={addTask}/>\n            {taskFilter.map(el => <Task\n                    key={el.id}\n                    task={el}\n                    changeTaskStatus={props.changeTaskStatus}\n                    id={props.id}\n                    removeTasks={props.removeTasks}\n                    updateTitle={props.updateTitle}\n                />\n            )}\n            <Button color={'primary'}\n                    size={'small'}\n                    variant={props.filter === 'all' ? 'outlined' : 'contained'}\n                    className={filterAllBtnHandler}\n                    onClick={onAllClickHandler}>all\n            </Button>\n            <Button color={'primary'}\n                    size={'small'}\n                    variant={props.filter === 'active' ? 'outlined' : 'contained'}\n                    className={filterActiveBtnHandler} onClick={onActiveClickHandler}>active\n            </Button>\n            <Button color={'primary'}\n                    size={'small'}\n                    variant={props.filter === 'completed' ? 'outlined' : 'contained'}\n                    className={filterCompletedBtnHandler} onClick={onCompletedClickHandler}>completed\n            </Button>\n        </div>\n    );\n  }\n)","import React, {useCallback} from 'react';\nimport './App.css';\nimport {Tasks} from './Tasks';\nimport {NewTitle} from \"./NewTitle\";\nimport {AppBar, Button, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from '@material-ui/icons'\nimport Container from '@material-ui/core/Container'\nimport {\n    addTodoListAC,\n    changeTodoListFilterAC,\n    changeTodoListTitleAC,\n    removeTodoListAC,\n} from \"./state/todolists-reducer\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/task-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\nimport {Dispatch} from \"redux\";\n\nexport type TodoListsType = {\n    id: string;\n    title: string;\n    filter: filterType\n}\nexport type AppTaskType = {\n    id: string;\n    title: string;\n    isDone: boolean;\n}\nexport type KeyTasksType = {\n    [key: string]: AppTaskType[]\n}\nexport type filterType = 'all' | 'active' | 'completed'\n\nfunction AppWithRedux() {\n\n    let todoLists = useSelector<AppRootStateType, TodoListsType[]>(state => state.todolists)\n    let tasks = useSelector<AppRootStateType, KeyTasksType>(state => state.tasks)\n    let dispatch = useDispatch<Dispatch>()\n\n    const removeTasks = useCallback((id: string, todoListId: string) => {\n        let action = removeTaskAC(id, todoListId)\n        dispatch(action)\n    },[dispatch])\n    const changeTaskStatus = useCallback((id: string, todoListId: string, isDone: boolean) => {\n        dispatch(changeTaskStatusAC(id, todoListId, isDone))\n    },[dispatch])\n    const addTask = useCallback((newTitle: string, todoListId: string) => {\n        dispatch(addTaskAC(newTitle, todoListId))\n    },[dispatch])\n    const updateTitle = useCallback((id: string, newTitle: string, todoListsId: string) => {\n        dispatch(changeTaskTitleAC(id, newTitle, todoListsId))\n    }, [dispatch])\n\n    const changeFilter = useCallback((value: filterType, todoListId: string) => {\n        dispatch(changeTodoListFilterAC(value, todoListId))\n    },[dispatch])\n    const removeTodoLists = useCallback((todoListId: string) => {\n        let action = removeTodoListAC(todoListId)\n        dispatch(action)\n\n    },[dispatch])\n    const addTodoList = useCallback((newTitle: string) => {\n        dispatch(addTodoListAC(newTitle))\n    },[dispatch])\n    const updateTodoListTitle = useCallback((newTitle: string, todoListId: string) => {\n        dispatch(changeTodoListTitleAC(newTitle, todoListId))\n    },[dispatch])\n\n    const todoListComponents = todoLists.map(el => {\n        return <Grid item={true}>\n            <Paper elevation={6} style={{padding: '10px'}}>\n                <Tasks key={el.id}\n                       id={el.id}\n                       task={tasks[el.id]}\n                       changeFilter={changeFilter}\n                       removeTasks={removeTasks}\n                       addTask={addTask}\n                       filter={el.filter}\n                       title={el.title}\n                       changeTaskStatus={changeTaskStatus}\n                       removeTodoLists={removeTodoLists}\n                       addTodoLists={addTodoList}\n                       updateTitle={updateTitle}\n                       updateTodoListTitle={updateTodoListTitle}\n                />\n            </Paper>\n        </Grid>\n    })\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        TodoLists\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container>\n                <Grid container={true} style={{padding: '20px 0px '}}>\n                    <NewTitle addTask={addTodoList}/>\n                </Grid>\n                <Grid spacing={3} container={true}>\n                    {todoListComponents}\n                </Grid>\n            </Container>\n        </div>\n    )\n}\n\nexport default AppWithRedux;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport AppWithRedux from \"./AppWithRedux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <AppWithRedux />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}